// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bfirestone/speed-checker/ent/host"
	"github.com/bfirestone/speed-checker/ent/iperftest"
	"github.com/bfirestone/speed-checker/ent/predicate"
)

// HostUpdate is the builder for updating Host entities.
type HostUpdate struct {
	config
	hooks    []Hook
	mutation *HostMutation
}

// Where appends a list predicates to the HostUpdate builder.
func (hu *HostUpdate) Where(ps ...predicate.Host) *HostUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetName sets the "name" field.
func (hu *HostUpdate) SetName(s string) *HostUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hu *HostUpdate) SetNillableName(s *string) *HostUpdate {
	if s != nil {
		hu.SetName(*s)
	}
	return hu
}

// SetHostname sets the "hostname" field.
func (hu *HostUpdate) SetHostname(s string) *HostUpdate {
	hu.mutation.SetHostname(s)
	return hu
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (hu *HostUpdate) SetNillableHostname(s *string) *HostUpdate {
	if s != nil {
		hu.SetHostname(*s)
	}
	return hu
}

// SetPort sets the "port" field.
func (hu *HostUpdate) SetPort(i int) *HostUpdate {
	hu.mutation.ResetPort()
	hu.mutation.SetPort(i)
	return hu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (hu *HostUpdate) SetNillablePort(i *int) *HostUpdate {
	if i != nil {
		hu.SetPort(*i)
	}
	return hu
}

// AddPort adds i to the "port" field.
func (hu *HostUpdate) AddPort(i int) *HostUpdate {
	hu.mutation.AddPort(i)
	return hu
}

// SetType sets the "type" field.
func (hu *HostUpdate) SetType(h host.Type) *HostUpdate {
	hu.mutation.SetType(h)
	return hu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (hu *HostUpdate) SetNillableType(h *host.Type) *HostUpdate {
	if h != nil {
		hu.SetType(*h)
	}
	return hu
}

// SetActive sets the "active" field.
func (hu *HostUpdate) SetActive(b bool) *HostUpdate {
	hu.mutation.SetActive(b)
	return hu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (hu *HostUpdate) SetNillableActive(b *bool) *HostUpdate {
	if b != nil {
		hu.SetActive(*b)
	}
	return hu
}

// SetDescription sets the "description" field.
func (hu *HostUpdate) SetDescription(s string) *HostUpdate {
	hu.mutation.SetDescription(s)
	return hu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hu *HostUpdate) SetNillableDescription(s *string) *HostUpdate {
	if s != nil {
		hu.SetDescription(*s)
	}
	return hu
}

// ClearDescription clears the value of the "description" field.
func (hu *HostUpdate) ClearDescription() *HostUpdate {
	hu.mutation.ClearDescription()
	return hu
}

// AddIperfTestIDs adds the "iperf_tests" edge to the IperfTest entity by IDs.
func (hu *HostUpdate) AddIperfTestIDs(ids ...int) *HostUpdate {
	hu.mutation.AddIperfTestIDs(ids...)
	return hu
}

// AddIperfTests adds the "iperf_tests" edges to the IperfTest entity.
func (hu *HostUpdate) AddIperfTests(i ...*IperfTest) *HostUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hu.AddIperfTestIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (hu *HostUpdate) Mutation() *HostMutation {
	return hu.mutation
}

// ClearIperfTests clears all "iperf_tests" edges to the IperfTest entity.
func (hu *HostUpdate) ClearIperfTests() *HostUpdate {
	hu.mutation.ClearIperfTests()
	return hu
}

// RemoveIperfTestIDs removes the "iperf_tests" edge to IperfTest entities by IDs.
func (hu *HostUpdate) RemoveIperfTestIDs(ids ...int) *HostUpdate {
	hu.mutation.RemoveIperfTestIDs(ids...)
	return hu
}

// RemoveIperfTests removes "iperf_tests" edges to IperfTest entities.
func (hu *HostUpdate) RemoveIperfTests(i ...*IperfTest) *HostUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hu.RemoveIperfTestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HostUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HostUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HostUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HostUpdate) check() error {
	if v, ok := hu.mutation.GetType(); ok {
		if err := host.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Host.type": %w`, err)}
		}
	}
	return nil
}

func (hu *HostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(host.Table, host.Columns, sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.SetField(host.FieldName, field.TypeString, value)
	}
	if value, ok := hu.mutation.Hostname(); ok {
		_spec.SetField(host.FieldHostname, field.TypeString, value)
	}
	if value, ok := hu.mutation.Port(); ok {
		_spec.SetField(host.FieldPort, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedPort(); ok {
		_spec.AddField(host.FieldPort, field.TypeInt, value)
	}
	if value, ok := hu.mutation.GetType(); ok {
		_spec.SetField(host.FieldType, field.TypeEnum, value)
	}
	if value, ok := hu.mutation.Active(); ok {
		_spec.SetField(host.FieldActive, field.TypeBool, value)
	}
	if value, ok := hu.mutation.Description(); ok {
		_spec.SetField(host.FieldDescription, field.TypeString, value)
	}
	if hu.mutation.DescriptionCleared() {
		_spec.ClearField(host.FieldDescription, field.TypeString)
	}
	if hu.mutation.IperfTestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.IperfTestsTable,
			Columns: []string{host.IperfTestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(iperftest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedIperfTestsIDs(); len(nodes) > 0 && !hu.mutation.IperfTestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.IperfTestsTable,
			Columns: []string{host.IperfTestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(iperftest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.IperfTestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.IperfTestsTable,
			Columns: []string{host.IperfTestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(iperftest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HostUpdateOne is the builder for updating a single Host entity.
type HostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostMutation
}

// SetName sets the "name" field.
func (huo *HostUpdateOne) SetName(s string) *HostUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableName(s *string) *HostUpdateOne {
	if s != nil {
		huo.SetName(*s)
	}
	return huo
}

// SetHostname sets the "hostname" field.
func (huo *HostUpdateOne) SetHostname(s string) *HostUpdateOne {
	huo.mutation.SetHostname(s)
	return huo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableHostname(s *string) *HostUpdateOne {
	if s != nil {
		huo.SetHostname(*s)
	}
	return huo
}

// SetPort sets the "port" field.
func (huo *HostUpdateOne) SetPort(i int) *HostUpdateOne {
	huo.mutation.ResetPort()
	huo.mutation.SetPort(i)
	return huo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillablePort(i *int) *HostUpdateOne {
	if i != nil {
		huo.SetPort(*i)
	}
	return huo
}

// AddPort adds i to the "port" field.
func (huo *HostUpdateOne) AddPort(i int) *HostUpdateOne {
	huo.mutation.AddPort(i)
	return huo
}

// SetType sets the "type" field.
func (huo *HostUpdateOne) SetType(h host.Type) *HostUpdateOne {
	huo.mutation.SetType(h)
	return huo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableType(h *host.Type) *HostUpdateOne {
	if h != nil {
		huo.SetType(*h)
	}
	return huo
}

// SetActive sets the "active" field.
func (huo *HostUpdateOne) SetActive(b bool) *HostUpdateOne {
	huo.mutation.SetActive(b)
	return huo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableActive(b *bool) *HostUpdateOne {
	if b != nil {
		huo.SetActive(*b)
	}
	return huo
}

// SetDescription sets the "description" field.
func (huo *HostUpdateOne) SetDescription(s string) *HostUpdateOne {
	huo.mutation.SetDescription(s)
	return huo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableDescription(s *string) *HostUpdateOne {
	if s != nil {
		huo.SetDescription(*s)
	}
	return huo
}

// ClearDescription clears the value of the "description" field.
func (huo *HostUpdateOne) ClearDescription() *HostUpdateOne {
	huo.mutation.ClearDescription()
	return huo
}

// AddIperfTestIDs adds the "iperf_tests" edge to the IperfTest entity by IDs.
func (huo *HostUpdateOne) AddIperfTestIDs(ids ...int) *HostUpdateOne {
	huo.mutation.AddIperfTestIDs(ids...)
	return huo
}

// AddIperfTests adds the "iperf_tests" edges to the IperfTest entity.
func (huo *HostUpdateOne) AddIperfTests(i ...*IperfTest) *HostUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return huo.AddIperfTestIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (huo *HostUpdateOne) Mutation() *HostMutation {
	return huo.mutation
}

// ClearIperfTests clears all "iperf_tests" edges to the IperfTest entity.
func (huo *HostUpdateOne) ClearIperfTests() *HostUpdateOne {
	huo.mutation.ClearIperfTests()
	return huo
}

// RemoveIperfTestIDs removes the "iperf_tests" edge to IperfTest entities by IDs.
func (huo *HostUpdateOne) RemoveIperfTestIDs(ids ...int) *HostUpdateOne {
	huo.mutation.RemoveIperfTestIDs(ids...)
	return huo
}

// RemoveIperfTests removes "iperf_tests" edges to IperfTest entities.
func (huo *HostUpdateOne) RemoveIperfTests(i ...*IperfTest) *HostUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return huo.RemoveIperfTestIDs(ids...)
}

// Where appends a list predicates to the HostUpdate builder.
func (huo *HostUpdateOne) Where(ps ...predicate.Host) *HostUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HostUpdateOne) Select(field string, fields ...string) *HostUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Host entity.
func (huo *HostUpdateOne) Save(ctx context.Context) (*Host, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HostUpdateOne) SaveX(ctx context.Context) *Host {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HostUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HostUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HostUpdateOne) check() error {
	if v, ok := huo.mutation.GetType(); ok {
		if err := host.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Host.type": %w`, err)}
		}
	}
	return nil
}

func (huo *HostUpdateOne) sqlSave(ctx context.Context) (_node *Host, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(host.Table, host.Columns, sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Host.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, host.FieldID)
		for _, f := range fields {
			if !host.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != host.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.SetField(host.FieldName, field.TypeString, value)
	}
	if value, ok := huo.mutation.Hostname(); ok {
		_spec.SetField(host.FieldHostname, field.TypeString, value)
	}
	if value, ok := huo.mutation.Port(); ok {
		_spec.SetField(host.FieldPort, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedPort(); ok {
		_spec.AddField(host.FieldPort, field.TypeInt, value)
	}
	if value, ok := huo.mutation.GetType(); ok {
		_spec.SetField(host.FieldType, field.TypeEnum, value)
	}
	if value, ok := huo.mutation.Active(); ok {
		_spec.SetField(host.FieldActive, field.TypeBool, value)
	}
	if value, ok := huo.mutation.Description(); ok {
		_spec.SetField(host.FieldDescription, field.TypeString, value)
	}
	if huo.mutation.DescriptionCleared() {
		_spec.ClearField(host.FieldDescription, field.TypeString)
	}
	if huo.mutation.IperfTestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.IperfTestsTable,
			Columns: []string{host.IperfTestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(iperftest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedIperfTestsIDs(); len(nodes) > 0 && !huo.mutation.IperfTestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.IperfTestsTable,
			Columns: []string{host.IperfTestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(iperftest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.IperfTestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.IperfTestsTable,
			Columns: []string{host.IperfTestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(iperftest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Host{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
