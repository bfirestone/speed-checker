// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bfirestone/speed-checker/ent/host"
	"github.com/bfirestone/speed-checker/ent/iperftest"
	"github.com/bfirestone/speed-checker/ent/predicate"
)

// IperfTestUpdate is the builder for updating IperfTest entities.
type IperfTestUpdate struct {
	config
	hooks    []Hook
	mutation *IperfTestMutation
}

// Where appends a list predicates to the IperfTestUpdate builder.
func (itu *IperfTestUpdate) Where(ps ...predicate.IperfTest) *IperfTestUpdate {
	itu.mutation.Where(ps...)
	return itu
}

// SetTimestamp sets the "timestamp" field.
func (itu *IperfTestUpdate) SetTimestamp(t time.Time) *IperfTestUpdate {
	itu.mutation.SetTimestamp(t)
	return itu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableTimestamp(t *time.Time) *IperfTestUpdate {
	if t != nil {
		itu.SetTimestamp(*t)
	}
	return itu
}

// SetSentMbps sets the "sent_mbps" field.
func (itu *IperfTestUpdate) SetSentMbps(f float64) *IperfTestUpdate {
	itu.mutation.ResetSentMbps()
	itu.mutation.SetSentMbps(f)
	return itu
}

// SetNillableSentMbps sets the "sent_mbps" field if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableSentMbps(f *float64) *IperfTestUpdate {
	if f != nil {
		itu.SetSentMbps(*f)
	}
	return itu
}

// AddSentMbps adds f to the "sent_mbps" field.
func (itu *IperfTestUpdate) AddSentMbps(f float64) *IperfTestUpdate {
	itu.mutation.AddSentMbps(f)
	return itu
}

// SetReceivedMbps sets the "received_mbps" field.
func (itu *IperfTestUpdate) SetReceivedMbps(f float64) *IperfTestUpdate {
	itu.mutation.ResetReceivedMbps()
	itu.mutation.SetReceivedMbps(f)
	return itu
}

// SetNillableReceivedMbps sets the "received_mbps" field if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableReceivedMbps(f *float64) *IperfTestUpdate {
	if f != nil {
		itu.SetReceivedMbps(*f)
	}
	return itu
}

// AddReceivedMbps adds f to the "received_mbps" field.
func (itu *IperfTestUpdate) AddReceivedMbps(f float64) *IperfTestUpdate {
	itu.mutation.AddReceivedMbps(f)
	return itu
}

// SetRetransmits sets the "retransmits" field.
func (itu *IperfTestUpdate) SetRetransmits(f float64) *IperfTestUpdate {
	itu.mutation.ResetRetransmits()
	itu.mutation.SetRetransmits(f)
	return itu
}

// SetNillableRetransmits sets the "retransmits" field if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableRetransmits(f *float64) *IperfTestUpdate {
	if f != nil {
		itu.SetRetransmits(*f)
	}
	return itu
}

// AddRetransmits adds f to the "retransmits" field.
func (itu *IperfTestUpdate) AddRetransmits(f float64) *IperfTestUpdate {
	itu.mutation.AddRetransmits(f)
	return itu
}

// ClearRetransmits clears the value of the "retransmits" field.
func (itu *IperfTestUpdate) ClearRetransmits() *IperfTestUpdate {
	itu.mutation.ClearRetransmits()
	return itu
}

// SetMeanRttMs sets the "mean_rtt_ms" field.
func (itu *IperfTestUpdate) SetMeanRttMs(f float64) *IperfTestUpdate {
	itu.mutation.ResetMeanRttMs()
	itu.mutation.SetMeanRttMs(f)
	return itu
}

// SetNillableMeanRttMs sets the "mean_rtt_ms" field if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableMeanRttMs(f *float64) *IperfTestUpdate {
	if f != nil {
		itu.SetMeanRttMs(*f)
	}
	return itu
}

// AddMeanRttMs adds f to the "mean_rtt_ms" field.
func (itu *IperfTestUpdate) AddMeanRttMs(f float64) *IperfTestUpdate {
	itu.mutation.AddMeanRttMs(f)
	return itu
}

// ClearMeanRttMs clears the value of the "mean_rtt_ms" field.
func (itu *IperfTestUpdate) ClearMeanRttMs() *IperfTestUpdate {
	itu.mutation.ClearMeanRttMs()
	return itu
}

// SetDurationSeconds sets the "duration_seconds" field.
func (itu *IperfTestUpdate) SetDurationSeconds(i int) *IperfTestUpdate {
	itu.mutation.ResetDurationSeconds()
	itu.mutation.SetDurationSeconds(i)
	return itu
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableDurationSeconds(i *int) *IperfTestUpdate {
	if i != nil {
		itu.SetDurationSeconds(*i)
	}
	return itu
}

// AddDurationSeconds adds i to the "duration_seconds" field.
func (itu *IperfTestUpdate) AddDurationSeconds(i int) *IperfTestUpdate {
	itu.mutation.AddDurationSeconds(i)
	return itu
}

// SetProtocol sets the "protocol" field.
func (itu *IperfTestUpdate) SetProtocol(s string) *IperfTestUpdate {
	itu.mutation.SetProtocol(s)
	return itu
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableProtocol(s *string) *IperfTestUpdate {
	if s != nil {
		itu.SetProtocol(*s)
	}
	return itu
}

// SetSuccess sets the "success" field.
func (itu *IperfTestUpdate) SetSuccess(b bool) *IperfTestUpdate {
	itu.mutation.SetSuccess(b)
	return itu
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableSuccess(b *bool) *IperfTestUpdate {
	if b != nil {
		itu.SetSuccess(*b)
	}
	return itu
}

// SetErrorMessage sets the "error_message" field.
func (itu *IperfTestUpdate) SetErrorMessage(s string) *IperfTestUpdate {
	itu.mutation.SetErrorMessage(s)
	return itu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableErrorMessage(s *string) *IperfTestUpdate {
	if s != nil {
		itu.SetErrorMessage(*s)
	}
	return itu
}

// ClearErrorMessage clears the value of the "error_message" field.
func (itu *IperfTestUpdate) ClearErrorMessage() *IperfTestUpdate {
	itu.mutation.ClearErrorMessage()
	return itu
}

// SetDaemonID sets the "daemon_id" field.
func (itu *IperfTestUpdate) SetDaemonID(s string) *IperfTestUpdate {
	itu.mutation.SetDaemonID(s)
	return itu
}

// SetNillableDaemonID sets the "daemon_id" field if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableDaemonID(s *string) *IperfTestUpdate {
	if s != nil {
		itu.SetDaemonID(*s)
	}
	return itu
}

// ClearDaemonID clears the value of the "daemon_id" field.
func (itu *IperfTestUpdate) ClearDaemonID() *IperfTestUpdate {
	itu.mutation.ClearDaemonID()
	return itu
}

// SetHostID sets the "host" edge to the Host entity by ID.
func (itu *IperfTestUpdate) SetHostID(id int) *IperfTestUpdate {
	itu.mutation.SetHostID(id)
	return itu
}

// SetNillableHostID sets the "host" edge to the Host entity by ID if the given value is not nil.
func (itu *IperfTestUpdate) SetNillableHostID(id *int) *IperfTestUpdate {
	if id != nil {
		itu = itu.SetHostID(*id)
	}
	return itu
}

// SetHost sets the "host" edge to the Host entity.
func (itu *IperfTestUpdate) SetHost(h *Host) *IperfTestUpdate {
	return itu.SetHostID(h.ID)
}

// Mutation returns the IperfTestMutation object of the builder.
func (itu *IperfTestUpdate) Mutation() *IperfTestMutation {
	return itu.mutation
}

// ClearHost clears the "host" edge to the Host entity.
func (itu *IperfTestUpdate) ClearHost() *IperfTestUpdate {
	itu.mutation.ClearHost()
	return itu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *IperfTestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, itu.sqlSave, itu.mutation, itu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itu *IperfTestUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *IperfTestUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *IperfTestUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (itu *IperfTestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(iperftest.Table, iperftest.Columns, sqlgraph.NewFieldSpec(iperftest.FieldID, field.TypeInt))
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.Timestamp(); ok {
		_spec.SetField(iperftest.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := itu.mutation.SentMbps(); ok {
		_spec.SetField(iperftest.FieldSentMbps, field.TypeFloat64, value)
	}
	if value, ok := itu.mutation.AddedSentMbps(); ok {
		_spec.AddField(iperftest.FieldSentMbps, field.TypeFloat64, value)
	}
	if value, ok := itu.mutation.ReceivedMbps(); ok {
		_spec.SetField(iperftest.FieldReceivedMbps, field.TypeFloat64, value)
	}
	if value, ok := itu.mutation.AddedReceivedMbps(); ok {
		_spec.AddField(iperftest.FieldReceivedMbps, field.TypeFloat64, value)
	}
	if value, ok := itu.mutation.Retransmits(); ok {
		_spec.SetField(iperftest.FieldRetransmits, field.TypeFloat64, value)
	}
	if value, ok := itu.mutation.AddedRetransmits(); ok {
		_spec.AddField(iperftest.FieldRetransmits, field.TypeFloat64, value)
	}
	if itu.mutation.RetransmitsCleared() {
		_spec.ClearField(iperftest.FieldRetransmits, field.TypeFloat64)
	}
	if value, ok := itu.mutation.MeanRttMs(); ok {
		_spec.SetField(iperftest.FieldMeanRttMs, field.TypeFloat64, value)
	}
	if value, ok := itu.mutation.AddedMeanRttMs(); ok {
		_spec.AddField(iperftest.FieldMeanRttMs, field.TypeFloat64, value)
	}
	if itu.mutation.MeanRttMsCleared() {
		_spec.ClearField(iperftest.FieldMeanRttMs, field.TypeFloat64)
	}
	if value, ok := itu.mutation.DurationSeconds(); ok {
		_spec.SetField(iperftest.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := itu.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(iperftest.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := itu.mutation.Protocol(); ok {
		_spec.SetField(iperftest.FieldProtocol, field.TypeString, value)
	}
	if value, ok := itu.mutation.Success(); ok {
		_spec.SetField(iperftest.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := itu.mutation.ErrorMessage(); ok {
		_spec.SetField(iperftest.FieldErrorMessage, field.TypeString, value)
	}
	if itu.mutation.ErrorMessageCleared() {
		_spec.ClearField(iperftest.FieldErrorMessage, field.TypeString)
	}
	if value, ok := itu.mutation.DaemonID(); ok {
		_spec.SetField(iperftest.FieldDaemonID, field.TypeString, value)
	}
	if itu.mutation.DaemonIDCleared() {
		_spec.ClearField(iperftest.FieldDaemonID, field.TypeString)
	}
	if itu.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   iperftest.HostTable,
			Columns: []string{iperftest.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   iperftest.HostTable,
			Columns: []string{iperftest.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{iperftest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	itu.mutation.done = true
	return n, nil
}

// IperfTestUpdateOne is the builder for updating a single IperfTest entity.
type IperfTestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IperfTestMutation
}

// SetTimestamp sets the "timestamp" field.
func (ituo *IperfTestUpdateOne) SetTimestamp(t time.Time) *IperfTestUpdateOne {
	ituo.mutation.SetTimestamp(t)
	return ituo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableTimestamp(t *time.Time) *IperfTestUpdateOne {
	if t != nil {
		ituo.SetTimestamp(*t)
	}
	return ituo
}

// SetSentMbps sets the "sent_mbps" field.
func (ituo *IperfTestUpdateOne) SetSentMbps(f float64) *IperfTestUpdateOne {
	ituo.mutation.ResetSentMbps()
	ituo.mutation.SetSentMbps(f)
	return ituo
}

// SetNillableSentMbps sets the "sent_mbps" field if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableSentMbps(f *float64) *IperfTestUpdateOne {
	if f != nil {
		ituo.SetSentMbps(*f)
	}
	return ituo
}

// AddSentMbps adds f to the "sent_mbps" field.
func (ituo *IperfTestUpdateOne) AddSentMbps(f float64) *IperfTestUpdateOne {
	ituo.mutation.AddSentMbps(f)
	return ituo
}

// SetReceivedMbps sets the "received_mbps" field.
func (ituo *IperfTestUpdateOne) SetReceivedMbps(f float64) *IperfTestUpdateOne {
	ituo.mutation.ResetReceivedMbps()
	ituo.mutation.SetReceivedMbps(f)
	return ituo
}

// SetNillableReceivedMbps sets the "received_mbps" field if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableReceivedMbps(f *float64) *IperfTestUpdateOne {
	if f != nil {
		ituo.SetReceivedMbps(*f)
	}
	return ituo
}

// AddReceivedMbps adds f to the "received_mbps" field.
func (ituo *IperfTestUpdateOne) AddReceivedMbps(f float64) *IperfTestUpdateOne {
	ituo.mutation.AddReceivedMbps(f)
	return ituo
}

// SetRetransmits sets the "retransmits" field.
func (ituo *IperfTestUpdateOne) SetRetransmits(f float64) *IperfTestUpdateOne {
	ituo.mutation.ResetRetransmits()
	ituo.mutation.SetRetransmits(f)
	return ituo
}

// SetNillableRetransmits sets the "retransmits" field if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableRetransmits(f *float64) *IperfTestUpdateOne {
	if f != nil {
		ituo.SetRetransmits(*f)
	}
	return ituo
}

// AddRetransmits adds f to the "retransmits" field.
func (ituo *IperfTestUpdateOne) AddRetransmits(f float64) *IperfTestUpdateOne {
	ituo.mutation.AddRetransmits(f)
	return ituo
}

// ClearRetransmits clears the value of the "retransmits" field.
func (ituo *IperfTestUpdateOne) ClearRetransmits() *IperfTestUpdateOne {
	ituo.mutation.ClearRetransmits()
	return ituo
}

// SetMeanRttMs sets the "mean_rtt_ms" field.
func (ituo *IperfTestUpdateOne) SetMeanRttMs(f float64) *IperfTestUpdateOne {
	ituo.mutation.ResetMeanRttMs()
	ituo.mutation.SetMeanRttMs(f)
	return ituo
}

// SetNillableMeanRttMs sets the "mean_rtt_ms" field if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableMeanRttMs(f *float64) *IperfTestUpdateOne {
	if f != nil {
		ituo.SetMeanRttMs(*f)
	}
	return ituo
}

// AddMeanRttMs adds f to the "mean_rtt_ms" field.
func (ituo *IperfTestUpdateOne) AddMeanRttMs(f float64) *IperfTestUpdateOne {
	ituo.mutation.AddMeanRttMs(f)
	return ituo
}

// ClearMeanRttMs clears the value of the "mean_rtt_ms" field.
func (ituo *IperfTestUpdateOne) ClearMeanRttMs() *IperfTestUpdateOne {
	ituo.mutation.ClearMeanRttMs()
	return ituo
}

// SetDurationSeconds sets the "duration_seconds" field.
func (ituo *IperfTestUpdateOne) SetDurationSeconds(i int) *IperfTestUpdateOne {
	ituo.mutation.ResetDurationSeconds()
	ituo.mutation.SetDurationSeconds(i)
	return ituo
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableDurationSeconds(i *int) *IperfTestUpdateOne {
	if i != nil {
		ituo.SetDurationSeconds(*i)
	}
	return ituo
}

// AddDurationSeconds adds i to the "duration_seconds" field.
func (ituo *IperfTestUpdateOne) AddDurationSeconds(i int) *IperfTestUpdateOne {
	ituo.mutation.AddDurationSeconds(i)
	return ituo
}

// SetProtocol sets the "protocol" field.
func (ituo *IperfTestUpdateOne) SetProtocol(s string) *IperfTestUpdateOne {
	ituo.mutation.SetProtocol(s)
	return ituo
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableProtocol(s *string) *IperfTestUpdateOne {
	if s != nil {
		ituo.SetProtocol(*s)
	}
	return ituo
}

// SetSuccess sets the "success" field.
func (ituo *IperfTestUpdateOne) SetSuccess(b bool) *IperfTestUpdateOne {
	ituo.mutation.SetSuccess(b)
	return ituo
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableSuccess(b *bool) *IperfTestUpdateOne {
	if b != nil {
		ituo.SetSuccess(*b)
	}
	return ituo
}

// SetErrorMessage sets the "error_message" field.
func (ituo *IperfTestUpdateOne) SetErrorMessage(s string) *IperfTestUpdateOne {
	ituo.mutation.SetErrorMessage(s)
	return ituo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableErrorMessage(s *string) *IperfTestUpdateOne {
	if s != nil {
		ituo.SetErrorMessage(*s)
	}
	return ituo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (ituo *IperfTestUpdateOne) ClearErrorMessage() *IperfTestUpdateOne {
	ituo.mutation.ClearErrorMessage()
	return ituo
}

// SetDaemonID sets the "daemon_id" field.
func (ituo *IperfTestUpdateOne) SetDaemonID(s string) *IperfTestUpdateOne {
	ituo.mutation.SetDaemonID(s)
	return ituo
}

// SetNillableDaemonID sets the "daemon_id" field if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableDaemonID(s *string) *IperfTestUpdateOne {
	if s != nil {
		ituo.SetDaemonID(*s)
	}
	return ituo
}

// ClearDaemonID clears the value of the "daemon_id" field.
func (ituo *IperfTestUpdateOne) ClearDaemonID() *IperfTestUpdateOne {
	ituo.mutation.ClearDaemonID()
	return ituo
}

// SetHostID sets the "host" edge to the Host entity by ID.
func (ituo *IperfTestUpdateOne) SetHostID(id int) *IperfTestUpdateOne {
	ituo.mutation.SetHostID(id)
	return ituo
}

// SetNillableHostID sets the "host" edge to the Host entity by ID if the given value is not nil.
func (ituo *IperfTestUpdateOne) SetNillableHostID(id *int) *IperfTestUpdateOne {
	if id != nil {
		ituo = ituo.SetHostID(*id)
	}
	return ituo
}

// SetHost sets the "host" edge to the Host entity.
func (ituo *IperfTestUpdateOne) SetHost(h *Host) *IperfTestUpdateOne {
	return ituo.SetHostID(h.ID)
}

// Mutation returns the IperfTestMutation object of the builder.
func (ituo *IperfTestUpdateOne) Mutation() *IperfTestMutation {
	return ituo.mutation
}

// ClearHost clears the "host" edge to the Host entity.
func (ituo *IperfTestUpdateOne) ClearHost() *IperfTestUpdateOne {
	ituo.mutation.ClearHost()
	return ituo
}

// Where appends a list predicates to the IperfTestUpdate builder.
func (ituo *IperfTestUpdateOne) Where(ps ...predicate.IperfTest) *IperfTestUpdateOne {
	ituo.mutation.Where(ps...)
	return ituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *IperfTestUpdateOne) Select(field string, fields ...string) *IperfTestUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated IperfTest entity.
func (ituo *IperfTestUpdateOne) Save(ctx context.Context) (*IperfTest, error) {
	return withHooks(ctx, ituo.sqlSave, ituo.mutation, ituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *IperfTestUpdateOne) SaveX(ctx context.Context) *IperfTest {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *IperfTestUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *IperfTestUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ituo *IperfTestUpdateOne) sqlSave(ctx context.Context) (_node *IperfTest, err error) {
	_spec := sqlgraph.NewUpdateSpec(iperftest.Table, iperftest.Columns, sqlgraph.NewFieldSpec(iperftest.FieldID, field.TypeInt))
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IperfTest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, iperftest.FieldID)
		for _, f := range fields {
			if !iperftest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != iperftest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.Timestamp(); ok {
		_spec.SetField(iperftest.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := ituo.mutation.SentMbps(); ok {
		_spec.SetField(iperftest.FieldSentMbps, field.TypeFloat64, value)
	}
	if value, ok := ituo.mutation.AddedSentMbps(); ok {
		_spec.AddField(iperftest.FieldSentMbps, field.TypeFloat64, value)
	}
	if value, ok := ituo.mutation.ReceivedMbps(); ok {
		_spec.SetField(iperftest.FieldReceivedMbps, field.TypeFloat64, value)
	}
	if value, ok := ituo.mutation.AddedReceivedMbps(); ok {
		_spec.AddField(iperftest.FieldReceivedMbps, field.TypeFloat64, value)
	}
	if value, ok := ituo.mutation.Retransmits(); ok {
		_spec.SetField(iperftest.FieldRetransmits, field.TypeFloat64, value)
	}
	if value, ok := ituo.mutation.AddedRetransmits(); ok {
		_spec.AddField(iperftest.FieldRetransmits, field.TypeFloat64, value)
	}
	if ituo.mutation.RetransmitsCleared() {
		_spec.ClearField(iperftest.FieldRetransmits, field.TypeFloat64)
	}
	if value, ok := ituo.mutation.MeanRttMs(); ok {
		_spec.SetField(iperftest.FieldMeanRttMs, field.TypeFloat64, value)
	}
	if value, ok := ituo.mutation.AddedMeanRttMs(); ok {
		_spec.AddField(iperftest.FieldMeanRttMs, field.TypeFloat64, value)
	}
	if ituo.mutation.MeanRttMsCleared() {
		_spec.ClearField(iperftest.FieldMeanRttMs, field.TypeFloat64)
	}
	if value, ok := ituo.mutation.DurationSeconds(); ok {
		_spec.SetField(iperftest.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := ituo.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(iperftest.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := ituo.mutation.Protocol(); ok {
		_spec.SetField(iperftest.FieldProtocol, field.TypeString, value)
	}
	if value, ok := ituo.mutation.Success(); ok {
		_spec.SetField(iperftest.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := ituo.mutation.ErrorMessage(); ok {
		_spec.SetField(iperftest.FieldErrorMessage, field.TypeString, value)
	}
	if ituo.mutation.ErrorMessageCleared() {
		_spec.ClearField(iperftest.FieldErrorMessage, field.TypeString)
	}
	if value, ok := ituo.mutation.DaemonID(); ok {
		_spec.SetField(iperftest.FieldDaemonID, field.TypeString, value)
	}
	if ituo.mutation.DaemonIDCleared() {
		_spec.ClearField(iperftest.FieldDaemonID, field.TypeString)
	}
	if ituo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   iperftest.HostTable,
			Columns: []string{iperftest.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   iperftest.HostTable,
			Columns: []string{iperftest.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IperfTest{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{iperftest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ituo.mutation.done = true
	return _node, nil
}
