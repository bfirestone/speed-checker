// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/bfirestone/speed-checker/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/bfirestone/speed-checker/ent/host"
	"github.com/bfirestone/speed-checker/ent/iperftest"
	"github.com/bfirestone/speed-checker/ent/speedtest"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Host is the client for interacting with the Host builders.
	Host *HostClient
	// IperfTest is the client for interacting with the IperfTest builders.
	IperfTest *IperfTestClient
	// SpeedTest is the client for interacting with the SpeedTest builders.
	SpeedTest *SpeedTestClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Host = NewHostClient(c.config)
	c.IperfTest = NewIperfTestClient(c.config)
	c.SpeedTest = NewSpeedTestClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Host:      NewHostClient(cfg),
		IperfTest: NewIperfTestClient(cfg),
		SpeedTest: NewSpeedTestClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Host:      NewHostClient(cfg),
		IperfTest: NewIperfTestClient(cfg),
		SpeedTest: NewSpeedTestClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Host.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Host.Use(hooks...)
	c.IperfTest.Use(hooks...)
	c.SpeedTest.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Host.Intercept(interceptors...)
	c.IperfTest.Intercept(interceptors...)
	c.SpeedTest.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *HostMutation:
		return c.Host.mutate(ctx, m)
	case *IperfTestMutation:
		return c.IperfTest.mutate(ctx, m)
	case *SpeedTestMutation:
		return c.SpeedTest.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// HostClient is a client for the Host schema.
type HostClient struct {
	config
}

// NewHostClient returns a client for the Host from the given config.
func NewHostClient(c config) *HostClient {
	return &HostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `host.Hooks(f(g(h())))`.
func (c *HostClient) Use(hooks ...Hook) {
	c.hooks.Host = append(c.hooks.Host, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `host.Intercept(f(g(h())))`.
func (c *HostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Host = append(c.inters.Host, interceptors...)
}

// Create returns a builder for creating a Host entity.
func (c *HostClient) Create() *HostCreate {
	mutation := newHostMutation(c.config, OpCreate)
	return &HostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Host entities.
func (c *HostClient) CreateBulk(builders ...*HostCreate) *HostCreateBulk {
	return &HostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostClient) MapCreateBulk(slice any, setFunc func(*HostCreate, int)) *HostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostCreateBulk{err: fmt.Errorf("calling to HostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Host.
func (c *HostClient) Update() *HostUpdate {
	mutation := newHostMutation(c.config, OpUpdate)
	return &HostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostClient) UpdateOne(h *Host) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHost(h))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostClient) UpdateOneID(id int) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHostID(id))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Host.
func (c *HostClient) Delete() *HostDelete {
	mutation := newHostMutation(c.config, OpDelete)
	return &HostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostClient) DeleteOne(h *Host) *HostDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostClient) DeleteOneID(id int) *HostDeleteOne {
	builder := c.Delete().Where(host.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostDeleteOne{builder}
}

// Query returns a query builder for Host.
func (c *HostClient) Query() *HostQuery {
	return &HostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHost},
		inters: c.Interceptors(),
	}
}

// Get returns a Host entity by its id.
func (c *HostClient) Get(ctx context.Context, id int) (*Host, error) {
	return c.Query().Where(host.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostClient) GetX(ctx context.Context, id int) *Host {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIperfTests queries the iperf_tests edge of a Host.
func (c *HostClient) QueryIperfTests(h *Host) *IperfTestQuery {
	query := (&IperfTestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(iperftest.Table, iperftest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, host.IperfTestsTable, host.IperfTestsColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostClient) Hooks() []Hook {
	return c.hooks.Host
}

// Interceptors returns the client interceptors.
func (c *HostClient) Interceptors() []Interceptor {
	return c.inters.Host
}

func (c *HostClient) mutate(ctx context.Context, m *HostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Host mutation op: %q", m.Op())
	}
}

// IperfTestClient is a client for the IperfTest schema.
type IperfTestClient struct {
	config
}

// NewIperfTestClient returns a client for the IperfTest from the given config.
func NewIperfTestClient(c config) *IperfTestClient {
	return &IperfTestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `iperftest.Hooks(f(g(h())))`.
func (c *IperfTestClient) Use(hooks ...Hook) {
	c.hooks.IperfTest = append(c.hooks.IperfTest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `iperftest.Intercept(f(g(h())))`.
func (c *IperfTestClient) Intercept(interceptors ...Interceptor) {
	c.inters.IperfTest = append(c.inters.IperfTest, interceptors...)
}

// Create returns a builder for creating a IperfTest entity.
func (c *IperfTestClient) Create() *IperfTestCreate {
	mutation := newIperfTestMutation(c.config, OpCreate)
	return &IperfTestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IperfTest entities.
func (c *IperfTestClient) CreateBulk(builders ...*IperfTestCreate) *IperfTestCreateBulk {
	return &IperfTestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IperfTestClient) MapCreateBulk(slice any, setFunc func(*IperfTestCreate, int)) *IperfTestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IperfTestCreateBulk{err: fmt.Errorf("calling to IperfTestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IperfTestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IperfTestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IperfTest.
func (c *IperfTestClient) Update() *IperfTestUpdate {
	mutation := newIperfTestMutation(c.config, OpUpdate)
	return &IperfTestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IperfTestClient) UpdateOne(it *IperfTest) *IperfTestUpdateOne {
	mutation := newIperfTestMutation(c.config, OpUpdateOne, withIperfTest(it))
	return &IperfTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IperfTestClient) UpdateOneID(id int) *IperfTestUpdateOne {
	mutation := newIperfTestMutation(c.config, OpUpdateOne, withIperfTestID(id))
	return &IperfTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IperfTest.
func (c *IperfTestClient) Delete() *IperfTestDelete {
	mutation := newIperfTestMutation(c.config, OpDelete)
	return &IperfTestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IperfTestClient) DeleteOne(it *IperfTest) *IperfTestDeleteOne {
	return c.DeleteOneID(it.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IperfTestClient) DeleteOneID(id int) *IperfTestDeleteOne {
	builder := c.Delete().Where(iperftest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IperfTestDeleteOne{builder}
}

// Query returns a query builder for IperfTest.
func (c *IperfTestClient) Query() *IperfTestQuery {
	return &IperfTestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIperfTest},
		inters: c.Interceptors(),
	}
}

// Get returns a IperfTest entity by its id.
func (c *IperfTestClient) Get(ctx context.Context, id int) (*IperfTest, error) {
	return c.Query().Where(iperftest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IperfTestClient) GetX(ctx context.Context, id int) *IperfTest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a IperfTest.
func (c *IperfTestClient) QueryHost(it *IperfTest) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := it.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(iperftest.Table, iperftest.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, iperftest.HostTable, iperftest.HostColumn),
		)
		fromV = sqlgraph.Neighbors(it.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IperfTestClient) Hooks() []Hook {
	return c.hooks.IperfTest
}

// Interceptors returns the client interceptors.
func (c *IperfTestClient) Interceptors() []Interceptor {
	return c.inters.IperfTest
}

func (c *IperfTestClient) mutate(ctx context.Context, m *IperfTestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IperfTestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IperfTestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IperfTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IperfTestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IperfTest mutation op: %q", m.Op())
	}
}

// SpeedTestClient is a client for the SpeedTest schema.
type SpeedTestClient struct {
	config
}

// NewSpeedTestClient returns a client for the SpeedTest from the given config.
func NewSpeedTestClient(c config) *SpeedTestClient {
	return &SpeedTestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `speedtest.Hooks(f(g(h())))`.
func (c *SpeedTestClient) Use(hooks ...Hook) {
	c.hooks.SpeedTest = append(c.hooks.SpeedTest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `speedtest.Intercept(f(g(h())))`.
func (c *SpeedTestClient) Intercept(interceptors ...Interceptor) {
	c.inters.SpeedTest = append(c.inters.SpeedTest, interceptors...)
}

// Create returns a builder for creating a SpeedTest entity.
func (c *SpeedTestClient) Create() *SpeedTestCreate {
	mutation := newSpeedTestMutation(c.config, OpCreate)
	return &SpeedTestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SpeedTest entities.
func (c *SpeedTestClient) CreateBulk(builders ...*SpeedTestCreate) *SpeedTestCreateBulk {
	return &SpeedTestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SpeedTestClient) MapCreateBulk(slice any, setFunc func(*SpeedTestCreate, int)) *SpeedTestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SpeedTestCreateBulk{err: fmt.Errorf("calling to SpeedTestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SpeedTestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SpeedTestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SpeedTest.
func (c *SpeedTestClient) Update() *SpeedTestUpdate {
	mutation := newSpeedTestMutation(c.config, OpUpdate)
	return &SpeedTestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SpeedTestClient) UpdateOne(st *SpeedTest) *SpeedTestUpdateOne {
	mutation := newSpeedTestMutation(c.config, OpUpdateOne, withSpeedTest(st))
	return &SpeedTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SpeedTestClient) UpdateOneID(id int) *SpeedTestUpdateOne {
	mutation := newSpeedTestMutation(c.config, OpUpdateOne, withSpeedTestID(id))
	return &SpeedTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SpeedTest.
func (c *SpeedTestClient) Delete() *SpeedTestDelete {
	mutation := newSpeedTestMutation(c.config, OpDelete)
	return &SpeedTestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SpeedTestClient) DeleteOne(st *SpeedTest) *SpeedTestDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SpeedTestClient) DeleteOneID(id int) *SpeedTestDeleteOne {
	builder := c.Delete().Where(speedtest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SpeedTestDeleteOne{builder}
}

// Query returns a query builder for SpeedTest.
func (c *SpeedTestClient) Query() *SpeedTestQuery {
	return &SpeedTestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSpeedTest},
		inters: c.Interceptors(),
	}
}

// Get returns a SpeedTest entity by its id.
func (c *SpeedTestClient) Get(ctx context.Context, id int) (*SpeedTest, error) {
	return c.Query().Where(speedtest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SpeedTestClient) GetX(ctx context.Context, id int) *SpeedTest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SpeedTestClient) Hooks() []Hook {
	return c.hooks.SpeedTest
}

// Interceptors returns the client interceptors.
func (c *SpeedTestClient) Interceptors() []Interceptor {
	return c.inters.SpeedTest
}

func (c *SpeedTestClient) mutate(ctx context.Context, m *SpeedTestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SpeedTestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SpeedTestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SpeedTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SpeedTestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SpeedTest mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Host, IperfTest, SpeedTest []ent.Hook
	}
	inters struct {
		Host, IperfTest, SpeedTest []ent.Interceptor
	}
)
