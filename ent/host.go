// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bfirestone/speed-checker/ent/host"
)

// Host is the model entity for the Host schema.
type Host struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Friendly name for the host
	Name string `json:"name,omitempty"`
	// Hostname or IP address
	Hostname string `json:"hostname,omitempty"`
	// iperf3 server port
	Port int `json:"port,omitempty"`
	// Host type: lan, vpn, or remote
	Type host.Type `json:"type,omitempty"`
	// Whether this host should be included in tests
	Active bool `json:"active,omitempty"`
	// Optional description of the host
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostQuery when eager-loading is set.
	Edges        HostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HostEdges holds the relations/edges for other nodes in the graph.
type HostEdges struct {
	// IperfTests holds the value of the iperf_tests edge.
	IperfTests []*IperfTest `json:"iperf_tests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IperfTestsOrErr returns the IperfTests value or an error if the edge
// was not loaded in eager-loading.
func (e HostEdges) IperfTestsOrErr() ([]*IperfTest, error) {
	if e.loadedTypes[0] {
		return e.IperfTests, nil
	}
	return nil, &NotLoadedError{edge: "iperf_tests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Host) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case host.FieldActive:
			values[i] = new(sql.NullBool)
		case host.FieldID, host.FieldPort:
			values[i] = new(sql.NullInt64)
		case host.FieldName, host.FieldHostname, host.FieldType, host.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Host fields.
func (h *Host) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case host.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case host.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case host.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				h.Hostname = value.String
			}
		case host.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				h.Port = int(value.Int64)
			}
		case host.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				h.Type = host.Type(value.String)
			}
		case host.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				h.Active = value.Bool
			}
		case host.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				h.Description = value.String
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Host.
// This includes values selected through modifiers, order, etc.
func (h *Host) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryIperfTests queries the "iperf_tests" edge of the Host entity.
func (h *Host) QueryIperfTests() *IperfTestQuery {
	return NewHostClient(h.config).QueryIperfTests(h)
}

// Update returns a builder for updating this Host.
// Note that you need to call Host.Unwrap() before calling this method if this Host
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Host) Update() *HostUpdateOne {
	return NewHostClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Host entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Host) Unwrap() *Host {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Host is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Host) String() string {
	var builder strings.Builder
	builder.WriteString("Host(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(h.Hostname)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", h.Port))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", h.Type))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", h.Active))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(h.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Hosts is a parsable slice of Host.
type Hosts []*Host
