// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bfirestone/speed-checker/ent/predicate"
	"github.com/bfirestone/speed-checker/ent/speedtest"
)

// SpeedTestUpdate is the builder for updating SpeedTest entities.
type SpeedTestUpdate struct {
	config
	hooks    []Hook
	mutation *SpeedTestMutation
}

// Where appends a list predicates to the SpeedTestUpdate builder.
func (stu *SpeedTestUpdate) Where(ps ...predicate.SpeedTest) *SpeedTestUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetTimestamp sets the "timestamp" field.
func (stu *SpeedTestUpdate) SetTimestamp(t time.Time) *SpeedTestUpdate {
	stu.mutation.SetTimestamp(t)
	return stu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (stu *SpeedTestUpdate) SetNillableTimestamp(t *time.Time) *SpeedTestUpdate {
	if t != nil {
		stu.SetTimestamp(*t)
	}
	return stu
}

// SetDownloadMbps sets the "download_mbps" field.
func (stu *SpeedTestUpdate) SetDownloadMbps(f float64) *SpeedTestUpdate {
	stu.mutation.ResetDownloadMbps()
	stu.mutation.SetDownloadMbps(f)
	return stu
}

// SetNillableDownloadMbps sets the "download_mbps" field if the given value is not nil.
func (stu *SpeedTestUpdate) SetNillableDownloadMbps(f *float64) *SpeedTestUpdate {
	if f != nil {
		stu.SetDownloadMbps(*f)
	}
	return stu
}

// AddDownloadMbps adds f to the "download_mbps" field.
func (stu *SpeedTestUpdate) AddDownloadMbps(f float64) *SpeedTestUpdate {
	stu.mutation.AddDownloadMbps(f)
	return stu
}

// SetUploadMbps sets the "upload_mbps" field.
func (stu *SpeedTestUpdate) SetUploadMbps(f float64) *SpeedTestUpdate {
	stu.mutation.ResetUploadMbps()
	stu.mutation.SetUploadMbps(f)
	return stu
}

// SetNillableUploadMbps sets the "upload_mbps" field if the given value is not nil.
func (stu *SpeedTestUpdate) SetNillableUploadMbps(f *float64) *SpeedTestUpdate {
	if f != nil {
		stu.SetUploadMbps(*f)
	}
	return stu
}

// AddUploadMbps adds f to the "upload_mbps" field.
func (stu *SpeedTestUpdate) AddUploadMbps(f float64) *SpeedTestUpdate {
	stu.mutation.AddUploadMbps(f)
	return stu
}

// SetPingMs sets the "ping_ms" field.
func (stu *SpeedTestUpdate) SetPingMs(f float64) *SpeedTestUpdate {
	stu.mutation.ResetPingMs()
	stu.mutation.SetPingMs(f)
	return stu
}

// SetNillablePingMs sets the "ping_ms" field if the given value is not nil.
func (stu *SpeedTestUpdate) SetNillablePingMs(f *float64) *SpeedTestUpdate {
	if f != nil {
		stu.SetPingMs(*f)
	}
	return stu
}

// AddPingMs adds f to the "ping_ms" field.
func (stu *SpeedTestUpdate) AddPingMs(f float64) *SpeedTestUpdate {
	stu.mutation.AddPingMs(f)
	return stu
}

// SetJitterMs sets the "jitter_ms" field.
func (stu *SpeedTestUpdate) SetJitterMs(f float64) *SpeedTestUpdate {
	stu.mutation.ResetJitterMs()
	stu.mutation.SetJitterMs(f)
	return stu
}

// SetNillableJitterMs sets the "jitter_ms" field if the given value is not nil.
func (stu *SpeedTestUpdate) SetNillableJitterMs(f *float64) *SpeedTestUpdate {
	if f != nil {
		stu.SetJitterMs(*f)
	}
	return stu
}

// AddJitterMs adds f to the "jitter_ms" field.
func (stu *SpeedTestUpdate) AddJitterMs(f float64) *SpeedTestUpdate {
	stu.mutation.AddJitterMs(f)
	return stu
}

// ClearJitterMs clears the value of the "jitter_ms" field.
func (stu *SpeedTestUpdate) ClearJitterMs() *SpeedTestUpdate {
	stu.mutation.ClearJitterMs()
	return stu
}

// SetServerName sets the "server_name" field.
func (stu *SpeedTestUpdate) SetServerName(s string) *SpeedTestUpdate {
	stu.mutation.SetServerName(s)
	return stu
}

// SetNillableServerName sets the "server_name" field if the given value is not nil.
func (stu *SpeedTestUpdate) SetNillableServerName(s *string) *SpeedTestUpdate {
	if s != nil {
		stu.SetServerName(*s)
	}
	return stu
}

// ClearServerName clears the value of the "server_name" field.
func (stu *SpeedTestUpdate) ClearServerName() *SpeedTestUpdate {
	stu.mutation.ClearServerName()
	return stu
}

// SetServerID sets the "server_id" field.
func (stu *SpeedTestUpdate) SetServerID(s string) *SpeedTestUpdate {
	stu.mutation.SetServerID(s)
	return stu
}

// SetNillableServerID sets the "server_id" field if the given value is not nil.
func (stu *SpeedTestUpdate) SetNillableServerID(s *string) *SpeedTestUpdate {
	if s != nil {
		stu.SetServerID(*s)
	}
	return stu
}

// ClearServerID clears the value of the "server_id" field.
func (stu *SpeedTestUpdate) ClearServerID() *SpeedTestUpdate {
	stu.mutation.ClearServerID()
	return stu
}

// SetIsp sets the "isp" field.
func (stu *SpeedTestUpdate) SetIsp(s string) *SpeedTestUpdate {
	stu.mutation.SetIsp(s)
	return stu
}

// SetNillableIsp sets the "isp" field if the given value is not nil.
func (stu *SpeedTestUpdate) SetNillableIsp(s *string) *SpeedTestUpdate {
	if s != nil {
		stu.SetIsp(*s)
	}
	return stu
}

// ClearIsp clears the value of the "isp" field.
func (stu *SpeedTestUpdate) ClearIsp() *SpeedTestUpdate {
	stu.mutation.ClearIsp()
	return stu
}

// SetExternalIP sets the "external_ip" field.
func (stu *SpeedTestUpdate) SetExternalIP(s string) *SpeedTestUpdate {
	stu.mutation.SetExternalIP(s)
	return stu
}

// SetNillableExternalIP sets the "external_ip" field if the given value is not nil.
func (stu *SpeedTestUpdate) SetNillableExternalIP(s *string) *SpeedTestUpdate {
	if s != nil {
		stu.SetExternalIP(*s)
	}
	return stu
}

// ClearExternalIP clears the value of the "external_ip" field.
func (stu *SpeedTestUpdate) ClearExternalIP() *SpeedTestUpdate {
	stu.mutation.ClearExternalIP()
	return stu
}

// SetResultURL sets the "result_url" field.
func (stu *SpeedTestUpdate) SetResultURL(s string) *SpeedTestUpdate {
	stu.mutation.SetResultURL(s)
	return stu
}

// SetNillableResultURL sets the "result_url" field if the given value is not nil.
func (stu *SpeedTestUpdate) SetNillableResultURL(s *string) *SpeedTestUpdate {
	if s != nil {
		stu.SetResultURL(*s)
	}
	return stu
}

// ClearResultURL clears the value of the "result_url" field.
func (stu *SpeedTestUpdate) ClearResultURL() *SpeedTestUpdate {
	stu.mutation.ClearResultURL()
	return stu
}

// Mutation returns the SpeedTestMutation object of the builder.
func (stu *SpeedTestUpdate) Mutation() *SpeedTestMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SpeedTestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, stu.sqlSave, stu.mutation, stu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SpeedTestUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SpeedTestUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SpeedTestUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *SpeedTestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(speedtest.Table, speedtest.Columns, sqlgraph.NewFieldSpec(speedtest.FieldID, field.TypeInt))
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Timestamp(); ok {
		_spec.SetField(speedtest.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := stu.mutation.DownloadMbps(); ok {
		_spec.SetField(speedtest.FieldDownloadMbps, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.AddedDownloadMbps(); ok {
		_spec.AddField(speedtest.FieldDownloadMbps, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.UploadMbps(); ok {
		_spec.SetField(speedtest.FieldUploadMbps, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.AddedUploadMbps(); ok {
		_spec.AddField(speedtest.FieldUploadMbps, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.PingMs(); ok {
		_spec.SetField(speedtest.FieldPingMs, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.AddedPingMs(); ok {
		_spec.AddField(speedtest.FieldPingMs, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.JitterMs(); ok {
		_spec.SetField(speedtest.FieldJitterMs, field.TypeFloat64, value)
	}
	if value, ok := stu.mutation.AddedJitterMs(); ok {
		_spec.AddField(speedtest.FieldJitterMs, field.TypeFloat64, value)
	}
	if stu.mutation.JitterMsCleared() {
		_spec.ClearField(speedtest.FieldJitterMs, field.TypeFloat64)
	}
	if value, ok := stu.mutation.ServerName(); ok {
		_spec.SetField(speedtest.FieldServerName, field.TypeString, value)
	}
	if stu.mutation.ServerNameCleared() {
		_spec.ClearField(speedtest.FieldServerName, field.TypeString)
	}
	if value, ok := stu.mutation.ServerID(); ok {
		_spec.SetField(speedtest.FieldServerID, field.TypeString, value)
	}
	if stu.mutation.ServerIDCleared() {
		_spec.ClearField(speedtest.FieldServerID, field.TypeString)
	}
	if value, ok := stu.mutation.Isp(); ok {
		_spec.SetField(speedtest.FieldIsp, field.TypeString, value)
	}
	if stu.mutation.IspCleared() {
		_spec.ClearField(speedtest.FieldIsp, field.TypeString)
	}
	if value, ok := stu.mutation.ExternalIP(); ok {
		_spec.SetField(speedtest.FieldExternalIP, field.TypeString, value)
	}
	if stu.mutation.ExternalIPCleared() {
		_spec.ClearField(speedtest.FieldExternalIP, field.TypeString)
	}
	if value, ok := stu.mutation.ResultURL(); ok {
		_spec.SetField(speedtest.FieldResultURL, field.TypeString, value)
	}
	if stu.mutation.ResultURLCleared() {
		_spec.ClearField(speedtest.FieldResultURL, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{speedtest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stu.mutation.done = true
	return n, nil
}

// SpeedTestUpdateOne is the builder for updating a single SpeedTest entity.
type SpeedTestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SpeedTestMutation
}

// SetTimestamp sets the "timestamp" field.
func (stuo *SpeedTestUpdateOne) SetTimestamp(t time.Time) *SpeedTestUpdateOne {
	stuo.mutation.SetTimestamp(t)
	return stuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (stuo *SpeedTestUpdateOne) SetNillableTimestamp(t *time.Time) *SpeedTestUpdateOne {
	if t != nil {
		stuo.SetTimestamp(*t)
	}
	return stuo
}

// SetDownloadMbps sets the "download_mbps" field.
func (stuo *SpeedTestUpdateOne) SetDownloadMbps(f float64) *SpeedTestUpdateOne {
	stuo.mutation.ResetDownloadMbps()
	stuo.mutation.SetDownloadMbps(f)
	return stuo
}

// SetNillableDownloadMbps sets the "download_mbps" field if the given value is not nil.
func (stuo *SpeedTestUpdateOne) SetNillableDownloadMbps(f *float64) *SpeedTestUpdateOne {
	if f != nil {
		stuo.SetDownloadMbps(*f)
	}
	return stuo
}

// AddDownloadMbps adds f to the "download_mbps" field.
func (stuo *SpeedTestUpdateOne) AddDownloadMbps(f float64) *SpeedTestUpdateOne {
	stuo.mutation.AddDownloadMbps(f)
	return stuo
}

// SetUploadMbps sets the "upload_mbps" field.
func (stuo *SpeedTestUpdateOne) SetUploadMbps(f float64) *SpeedTestUpdateOne {
	stuo.mutation.ResetUploadMbps()
	stuo.mutation.SetUploadMbps(f)
	return stuo
}

// SetNillableUploadMbps sets the "upload_mbps" field if the given value is not nil.
func (stuo *SpeedTestUpdateOne) SetNillableUploadMbps(f *float64) *SpeedTestUpdateOne {
	if f != nil {
		stuo.SetUploadMbps(*f)
	}
	return stuo
}

// AddUploadMbps adds f to the "upload_mbps" field.
func (stuo *SpeedTestUpdateOne) AddUploadMbps(f float64) *SpeedTestUpdateOne {
	stuo.mutation.AddUploadMbps(f)
	return stuo
}

// SetPingMs sets the "ping_ms" field.
func (stuo *SpeedTestUpdateOne) SetPingMs(f float64) *SpeedTestUpdateOne {
	stuo.mutation.ResetPingMs()
	stuo.mutation.SetPingMs(f)
	return stuo
}

// SetNillablePingMs sets the "ping_ms" field if the given value is not nil.
func (stuo *SpeedTestUpdateOne) SetNillablePingMs(f *float64) *SpeedTestUpdateOne {
	if f != nil {
		stuo.SetPingMs(*f)
	}
	return stuo
}

// AddPingMs adds f to the "ping_ms" field.
func (stuo *SpeedTestUpdateOne) AddPingMs(f float64) *SpeedTestUpdateOne {
	stuo.mutation.AddPingMs(f)
	return stuo
}

// SetJitterMs sets the "jitter_ms" field.
func (stuo *SpeedTestUpdateOne) SetJitterMs(f float64) *SpeedTestUpdateOne {
	stuo.mutation.ResetJitterMs()
	stuo.mutation.SetJitterMs(f)
	return stuo
}

// SetNillableJitterMs sets the "jitter_ms" field if the given value is not nil.
func (stuo *SpeedTestUpdateOne) SetNillableJitterMs(f *float64) *SpeedTestUpdateOne {
	if f != nil {
		stuo.SetJitterMs(*f)
	}
	return stuo
}

// AddJitterMs adds f to the "jitter_ms" field.
func (stuo *SpeedTestUpdateOne) AddJitterMs(f float64) *SpeedTestUpdateOne {
	stuo.mutation.AddJitterMs(f)
	return stuo
}

// ClearJitterMs clears the value of the "jitter_ms" field.
func (stuo *SpeedTestUpdateOne) ClearJitterMs() *SpeedTestUpdateOne {
	stuo.mutation.ClearJitterMs()
	return stuo
}

// SetServerName sets the "server_name" field.
func (stuo *SpeedTestUpdateOne) SetServerName(s string) *SpeedTestUpdateOne {
	stuo.mutation.SetServerName(s)
	return stuo
}

// SetNillableServerName sets the "server_name" field if the given value is not nil.
func (stuo *SpeedTestUpdateOne) SetNillableServerName(s *string) *SpeedTestUpdateOne {
	if s != nil {
		stuo.SetServerName(*s)
	}
	return stuo
}

// ClearServerName clears the value of the "server_name" field.
func (stuo *SpeedTestUpdateOne) ClearServerName() *SpeedTestUpdateOne {
	stuo.mutation.ClearServerName()
	return stuo
}

// SetServerID sets the "server_id" field.
func (stuo *SpeedTestUpdateOne) SetServerID(s string) *SpeedTestUpdateOne {
	stuo.mutation.SetServerID(s)
	return stuo
}

// SetNillableServerID sets the "server_id" field if the given value is not nil.
func (stuo *SpeedTestUpdateOne) SetNillableServerID(s *string) *SpeedTestUpdateOne {
	if s != nil {
		stuo.SetServerID(*s)
	}
	return stuo
}

// ClearServerID clears the value of the "server_id" field.
func (stuo *SpeedTestUpdateOne) ClearServerID() *SpeedTestUpdateOne {
	stuo.mutation.ClearServerID()
	return stuo
}

// SetIsp sets the "isp" field.
func (stuo *SpeedTestUpdateOne) SetIsp(s string) *SpeedTestUpdateOne {
	stuo.mutation.SetIsp(s)
	return stuo
}

// SetNillableIsp sets the "isp" field if the given value is not nil.
func (stuo *SpeedTestUpdateOne) SetNillableIsp(s *string) *SpeedTestUpdateOne {
	if s != nil {
		stuo.SetIsp(*s)
	}
	return stuo
}

// ClearIsp clears the value of the "isp" field.
func (stuo *SpeedTestUpdateOne) ClearIsp() *SpeedTestUpdateOne {
	stuo.mutation.ClearIsp()
	return stuo
}

// SetExternalIP sets the "external_ip" field.
func (stuo *SpeedTestUpdateOne) SetExternalIP(s string) *SpeedTestUpdateOne {
	stuo.mutation.SetExternalIP(s)
	return stuo
}

// SetNillableExternalIP sets the "external_ip" field if the given value is not nil.
func (stuo *SpeedTestUpdateOne) SetNillableExternalIP(s *string) *SpeedTestUpdateOne {
	if s != nil {
		stuo.SetExternalIP(*s)
	}
	return stuo
}

// ClearExternalIP clears the value of the "external_ip" field.
func (stuo *SpeedTestUpdateOne) ClearExternalIP() *SpeedTestUpdateOne {
	stuo.mutation.ClearExternalIP()
	return stuo
}

// SetResultURL sets the "result_url" field.
func (stuo *SpeedTestUpdateOne) SetResultURL(s string) *SpeedTestUpdateOne {
	stuo.mutation.SetResultURL(s)
	return stuo
}

// SetNillableResultURL sets the "result_url" field if the given value is not nil.
func (stuo *SpeedTestUpdateOne) SetNillableResultURL(s *string) *SpeedTestUpdateOne {
	if s != nil {
		stuo.SetResultURL(*s)
	}
	return stuo
}

// ClearResultURL clears the value of the "result_url" field.
func (stuo *SpeedTestUpdateOne) ClearResultURL() *SpeedTestUpdateOne {
	stuo.mutation.ClearResultURL()
	return stuo
}

// Mutation returns the SpeedTestMutation object of the builder.
func (stuo *SpeedTestUpdateOne) Mutation() *SpeedTestMutation {
	return stuo.mutation
}

// Where appends a list predicates to the SpeedTestUpdate builder.
func (stuo *SpeedTestUpdateOne) Where(ps ...predicate.SpeedTest) *SpeedTestUpdateOne {
	stuo.mutation.Where(ps...)
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SpeedTestUpdateOne) Select(field string, fields ...string) *SpeedTestUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SpeedTest entity.
func (stuo *SpeedTestUpdateOne) Save(ctx context.Context) (*SpeedTest, error) {
	return withHooks(ctx, stuo.sqlSave, stuo.mutation, stuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SpeedTestUpdateOne) SaveX(ctx context.Context) *SpeedTest {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SpeedTestUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SpeedTestUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *SpeedTestUpdateOne) sqlSave(ctx context.Context) (_node *SpeedTest, err error) {
	_spec := sqlgraph.NewUpdateSpec(speedtest.Table, speedtest.Columns, sqlgraph.NewFieldSpec(speedtest.FieldID, field.TypeInt))
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SpeedTest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, speedtest.FieldID)
		for _, f := range fields {
			if !speedtest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != speedtest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Timestamp(); ok {
		_spec.SetField(speedtest.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := stuo.mutation.DownloadMbps(); ok {
		_spec.SetField(speedtest.FieldDownloadMbps, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.AddedDownloadMbps(); ok {
		_spec.AddField(speedtest.FieldDownloadMbps, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.UploadMbps(); ok {
		_spec.SetField(speedtest.FieldUploadMbps, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.AddedUploadMbps(); ok {
		_spec.AddField(speedtest.FieldUploadMbps, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.PingMs(); ok {
		_spec.SetField(speedtest.FieldPingMs, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.AddedPingMs(); ok {
		_spec.AddField(speedtest.FieldPingMs, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.JitterMs(); ok {
		_spec.SetField(speedtest.FieldJitterMs, field.TypeFloat64, value)
	}
	if value, ok := stuo.mutation.AddedJitterMs(); ok {
		_spec.AddField(speedtest.FieldJitterMs, field.TypeFloat64, value)
	}
	if stuo.mutation.JitterMsCleared() {
		_spec.ClearField(speedtest.FieldJitterMs, field.TypeFloat64)
	}
	if value, ok := stuo.mutation.ServerName(); ok {
		_spec.SetField(speedtest.FieldServerName, field.TypeString, value)
	}
	if stuo.mutation.ServerNameCleared() {
		_spec.ClearField(speedtest.FieldServerName, field.TypeString)
	}
	if value, ok := stuo.mutation.ServerID(); ok {
		_spec.SetField(speedtest.FieldServerID, field.TypeString, value)
	}
	if stuo.mutation.ServerIDCleared() {
		_spec.ClearField(speedtest.FieldServerID, field.TypeString)
	}
	if value, ok := stuo.mutation.Isp(); ok {
		_spec.SetField(speedtest.FieldIsp, field.TypeString, value)
	}
	if stuo.mutation.IspCleared() {
		_spec.ClearField(speedtest.FieldIsp, field.TypeString)
	}
	if value, ok := stuo.mutation.ExternalIP(); ok {
		_spec.SetField(speedtest.FieldExternalIP, field.TypeString, value)
	}
	if stuo.mutation.ExternalIPCleared() {
		_spec.ClearField(speedtest.FieldExternalIP, field.TypeString)
	}
	if value, ok := stuo.mutation.ResultURL(); ok {
		_spec.SetField(speedtest.FieldResultURL, field.TypeString, value)
	}
	if stuo.mutation.ResultURLCleared() {
		_spec.ClearField(speedtest.FieldResultURL, field.TypeString)
	}
	_node = &SpeedTest{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{speedtest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuo.mutation.done = true
	return _node, nil
}
