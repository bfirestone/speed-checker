// Code generated by ent, DO NOT EDIT.

package iperftest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/bfirestone/speed-checker/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLTE(FieldID, id))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldTimestamp, v))
}

// SentMbps applies equality check predicate on the "sent_mbps" field. It's identical to SentMbpsEQ.
func SentMbps(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldSentMbps, v))
}

// ReceivedMbps applies equality check predicate on the "received_mbps" field. It's identical to ReceivedMbpsEQ.
func ReceivedMbps(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldReceivedMbps, v))
}

// Retransmits applies equality check predicate on the "retransmits" field. It's identical to RetransmitsEQ.
func Retransmits(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldRetransmits, v))
}

// MeanRttMs applies equality check predicate on the "mean_rtt_ms" field. It's identical to MeanRttMsEQ.
func MeanRttMs(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldMeanRttMs, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldDurationSeconds, v))
}

// Protocol applies equality check predicate on the "protocol" field. It's identical to ProtocolEQ.
func Protocol(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldProtocol, v))
}

// Success applies equality check predicate on the "success" field. It's identical to SuccessEQ.
func Success(v bool) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldSuccess, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldErrorMessage, v))
}

// DaemonID applies equality check predicate on the "daemon_id" field. It's identical to DaemonIDEQ.
func DaemonID(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldDaemonID, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLTE(FieldTimestamp, v))
}

// SentMbpsEQ applies the EQ predicate on the "sent_mbps" field.
func SentMbpsEQ(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldSentMbps, v))
}

// SentMbpsNEQ applies the NEQ predicate on the "sent_mbps" field.
func SentMbpsNEQ(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldSentMbps, v))
}

// SentMbpsIn applies the In predicate on the "sent_mbps" field.
func SentMbpsIn(vs ...float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIn(FieldSentMbps, vs...))
}

// SentMbpsNotIn applies the NotIn predicate on the "sent_mbps" field.
func SentMbpsNotIn(vs ...float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotIn(FieldSentMbps, vs...))
}

// SentMbpsGT applies the GT predicate on the "sent_mbps" field.
func SentMbpsGT(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGT(FieldSentMbps, v))
}

// SentMbpsGTE applies the GTE predicate on the "sent_mbps" field.
func SentMbpsGTE(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGTE(FieldSentMbps, v))
}

// SentMbpsLT applies the LT predicate on the "sent_mbps" field.
func SentMbpsLT(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLT(FieldSentMbps, v))
}

// SentMbpsLTE applies the LTE predicate on the "sent_mbps" field.
func SentMbpsLTE(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLTE(FieldSentMbps, v))
}

// ReceivedMbpsEQ applies the EQ predicate on the "received_mbps" field.
func ReceivedMbpsEQ(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldReceivedMbps, v))
}

// ReceivedMbpsNEQ applies the NEQ predicate on the "received_mbps" field.
func ReceivedMbpsNEQ(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldReceivedMbps, v))
}

// ReceivedMbpsIn applies the In predicate on the "received_mbps" field.
func ReceivedMbpsIn(vs ...float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIn(FieldReceivedMbps, vs...))
}

// ReceivedMbpsNotIn applies the NotIn predicate on the "received_mbps" field.
func ReceivedMbpsNotIn(vs ...float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotIn(FieldReceivedMbps, vs...))
}

// ReceivedMbpsGT applies the GT predicate on the "received_mbps" field.
func ReceivedMbpsGT(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGT(FieldReceivedMbps, v))
}

// ReceivedMbpsGTE applies the GTE predicate on the "received_mbps" field.
func ReceivedMbpsGTE(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGTE(FieldReceivedMbps, v))
}

// ReceivedMbpsLT applies the LT predicate on the "received_mbps" field.
func ReceivedMbpsLT(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLT(FieldReceivedMbps, v))
}

// ReceivedMbpsLTE applies the LTE predicate on the "received_mbps" field.
func ReceivedMbpsLTE(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLTE(FieldReceivedMbps, v))
}

// RetransmitsEQ applies the EQ predicate on the "retransmits" field.
func RetransmitsEQ(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldRetransmits, v))
}

// RetransmitsNEQ applies the NEQ predicate on the "retransmits" field.
func RetransmitsNEQ(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldRetransmits, v))
}

// RetransmitsIn applies the In predicate on the "retransmits" field.
func RetransmitsIn(vs ...float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIn(FieldRetransmits, vs...))
}

// RetransmitsNotIn applies the NotIn predicate on the "retransmits" field.
func RetransmitsNotIn(vs ...float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotIn(FieldRetransmits, vs...))
}

// RetransmitsGT applies the GT predicate on the "retransmits" field.
func RetransmitsGT(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGT(FieldRetransmits, v))
}

// RetransmitsGTE applies the GTE predicate on the "retransmits" field.
func RetransmitsGTE(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGTE(FieldRetransmits, v))
}

// RetransmitsLT applies the LT predicate on the "retransmits" field.
func RetransmitsLT(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLT(FieldRetransmits, v))
}

// RetransmitsLTE applies the LTE predicate on the "retransmits" field.
func RetransmitsLTE(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLTE(FieldRetransmits, v))
}

// RetransmitsIsNil applies the IsNil predicate on the "retransmits" field.
func RetransmitsIsNil() predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIsNull(FieldRetransmits))
}

// RetransmitsNotNil applies the NotNil predicate on the "retransmits" field.
func RetransmitsNotNil() predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotNull(FieldRetransmits))
}

// MeanRttMsEQ applies the EQ predicate on the "mean_rtt_ms" field.
func MeanRttMsEQ(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldMeanRttMs, v))
}

// MeanRttMsNEQ applies the NEQ predicate on the "mean_rtt_ms" field.
func MeanRttMsNEQ(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldMeanRttMs, v))
}

// MeanRttMsIn applies the In predicate on the "mean_rtt_ms" field.
func MeanRttMsIn(vs ...float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIn(FieldMeanRttMs, vs...))
}

// MeanRttMsNotIn applies the NotIn predicate on the "mean_rtt_ms" field.
func MeanRttMsNotIn(vs ...float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotIn(FieldMeanRttMs, vs...))
}

// MeanRttMsGT applies the GT predicate on the "mean_rtt_ms" field.
func MeanRttMsGT(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGT(FieldMeanRttMs, v))
}

// MeanRttMsGTE applies the GTE predicate on the "mean_rtt_ms" field.
func MeanRttMsGTE(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGTE(FieldMeanRttMs, v))
}

// MeanRttMsLT applies the LT predicate on the "mean_rtt_ms" field.
func MeanRttMsLT(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLT(FieldMeanRttMs, v))
}

// MeanRttMsLTE applies the LTE predicate on the "mean_rtt_ms" field.
func MeanRttMsLTE(v float64) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLTE(FieldMeanRttMs, v))
}

// MeanRttMsIsNil applies the IsNil predicate on the "mean_rtt_ms" field.
func MeanRttMsIsNil() predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIsNull(FieldMeanRttMs))
}

// MeanRttMsNotNil applies the NotNil predicate on the "mean_rtt_ms" field.
func MeanRttMsNotNil() predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotNull(FieldMeanRttMs))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v int) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLTE(FieldDurationSeconds, v))
}

// ProtocolEQ applies the EQ predicate on the "protocol" field.
func ProtocolEQ(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldProtocol, v))
}

// ProtocolNEQ applies the NEQ predicate on the "protocol" field.
func ProtocolNEQ(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldProtocol, v))
}

// ProtocolIn applies the In predicate on the "protocol" field.
func ProtocolIn(vs ...string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIn(FieldProtocol, vs...))
}

// ProtocolNotIn applies the NotIn predicate on the "protocol" field.
func ProtocolNotIn(vs ...string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotIn(FieldProtocol, vs...))
}

// ProtocolGT applies the GT predicate on the "protocol" field.
func ProtocolGT(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGT(FieldProtocol, v))
}

// ProtocolGTE applies the GTE predicate on the "protocol" field.
func ProtocolGTE(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGTE(FieldProtocol, v))
}

// ProtocolLT applies the LT predicate on the "protocol" field.
func ProtocolLT(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLT(FieldProtocol, v))
}

// ProtocolLTE applies the LTE predicate on the "protocol" field.
func ProtocolLTE(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLTE(FieldProtocol, v))
}

// ProtocolContains applies the Contains predicate on the "protocol" field.
func ProtocolContains(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldContains(FieldProtocol, v))
}

// ProtocolHasPrefix applies the HasPrefix predicate on the "protocol" field.
func ProtocolHasPrefix(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldHasPrefix(FieldProtocol, v))
}

// ProtocolHasSuffix applies the HasSuffix predicate on the "protocol" field.
func ProtocolHasSuffix(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldHasSuffix(FieldProtocol, v))
}

// ProtocolEqualFold applies the EqualFold predicate on the "protocol" field.
func ProtocolEqualFold(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEqualFold(FieldProtocol, v))
}

// ProtocolContainsFold applies the ContainsFold predicate on the "protocol" field.
func ProtocolContainsFold(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldContainsFold(FieldProtocol, v))
}

// SuccessEQ applies the EQ predicate on the "success" field.
func SuccessEQ(v bool) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldSuccess, v))
}

// SuccessNEQ applies the NEQ predicate on the "success" field.
func SuccessNEQ(v bool) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldSuccess, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldContainsFold(FieldErrorMessage, v))
}

// DaemonIDEQ applies the EQ predicate on the "daemon_id" field.
func DaemonIDEQ(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEQ(FieldDaemonID, v))
}

// DaemonIDNEQ applies the NEQ predicate on the "daemon_id" field.
func DaemonIDNEQ(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNEQ(FieldDaemonID, v))
}

// DaemonIDIn applies the In predicate on the "daemon_id" field.
func DaemonIDIn(vs ...string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIn(FieldDaemonID, vs...))
}

// DaemonIDNotIn applies the NotIn predicate on the "daemon_id" field.
func DaemonIDNotIn(vs ...string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotIn(FieldDaemonID, vs...))
}

// DaemonIDGT applies the GT predicate on the "daemon_id" field.
func DaemonIDGT(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGT(FieldDaemonID, v))
}

// DaemonIDGTE applies the GTE predicate on the "daemon_id" field.
func DaemonIDGTE(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldGTE(FieldDaemonID, v))
}

// DaemonIDLT applies the LT predicate on the "daemon_id" field.
func DaemonIDLT(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLT(FieldDaemonID, v))
}

// DaemonIDLTE applies the LTE predicate on the "daemon_id" field.
func DaemonIDLTE(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldLTE(FieldDaemonID, v))
}

// DaemonIDContains applies the Contains predicate on the "daemon_id" field.
func DaemonIDContains(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldContains(FieldDaemonID, v))
}

// DaemonIDHasPrefix applies the HasPrefix predicate on the "daemon_id" field.
func DaemonIDHasPrefix(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldHasPrefix(FieldDaemonID, v))
}

// DaemonIDHasSuffix applies the HasSuffix predicate on the "daemon_id" field.
func DaemonIDHasSuffix(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldHasSuffix(FieldDaemonID, v))
}

// DaemonIDIsNil applies the IsNil predicate on the "daemon_id" field.
func DaemonIDIsNil() predicate.IperfTest {
	return predicate.IperfTest(sql.FieldIsNull(FieldDaemonID))
}

// DaemonIDNotNil applies the NotNil predicate on the "daemon_id" field.
func DaemonIDNotNil() predicate.IperfTest {
	return predicate.IperfTest(sql.FieldNotNull(FieldDaemonID))
}

// DaemonIDEqualFold applies the EqualFold predicate on the "daemon_id" field.
func DaemonIDEqualFold(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldEqualFold(FieldDaemonID, v))
}

// DaemonIDContainsFold applies the ContainsFold predicate on the "daemon_id" field.
func DaemonIDContainsFold(v string) predicate.IperfTest {
	return predicate.IperfTest(sql.FieldContainsFold(FieldDaemonID, v))
}

// HasHost applies the HasEdge predicate on the "host" edge.
func HasHost() predicate.IperfTest {
	return predicate.IperfTest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostTable, HostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostWith applies the HasEdge predicate on the "host" edge with a given conditions (other predicates).
func HasHostWith(preds ...predicate.Host) predicate.IperfTest {
	return predicate.IperfTest(func(s *sql.Selector) {
		step := newHostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IperfTest) predicate.IperfTest {
	return predicate.IperfTest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IperfTest) predicate.IperfTest {
	return predicate.IperfTest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IperfTest) predicate.IperfTest {
	return predicate.IperfTest(sql.NotPredicates(p))
}
