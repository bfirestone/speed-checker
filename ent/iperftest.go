// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bfirestone/speed-checker/ent/host"
	"github.com/bfirestone/speed-checker/ent/iperftest"
)

// IperfTest is the model entity for the IperfTest schema.
type IperfTest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Upload speed in Mbps (sent to server)
	SentMbps float64 `json:"sent_mbps,omitempty"`
	// Download speed in Mbps (received from server)
	ReceivedMbps float64 `json:"received_mbps,omitempty"`
	// Number of retransmits
	Retransmits float64 `json:"retransmits,omitempty"`
	// Mean round-trip time in milliseconds
	MeanRttMs float64 `json:"mean_rtt_ms,omitempty"`
	// Test duration in seconds
	DurationSeconds int `json:"duration_seconds,omitempty"`
	// Protocol used (TCP/UDP)
	Protocol string `json:"protocol,omitempty"`
	// Whether the test completed successfully
	Success bool `json:"success,omitempty"`
	// Error message if test failed
	ErrorMessage string `json:"error_message,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IperfTestQuery when eager-loading is set.
	Edges            IperfTestEdges `json:"edges"`
	host_iperf_tests *int
	selectValues     sql.SelectValues
}

// IperfTestEdges holds the relations/edges for other nodes in the graph.
type IperfTestEdges struct {
	// Host holds the value of the host edge.
	Host *Host `json:"host,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IperfTestEdges) HostOrErr() (*Host, error) {
	if e.Host != nil {
		return e.Host, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: host.Label}
	}
	return nil, &NotLoadedError{edge: "host"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IperfTest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case iperftest.FieldSuccess:
			values[i] = new(sql.NullBool)
		case iperftest.FieldSentMbps, iperftest.FieldReceivedMbps, iperftest.FieldRetransmits, iperftest.FieldMeanRttMs:
			values[i] = new(sql.NullFloat64)
		case iperftest.FieldID, iperftest.FieldDurationSeconds:
			values[i] = new(sql.NullInt64)
		case iperftest.FieldProtocol, iperftest.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case iperftest.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case iperftest.ForeignKeys[0]: // host_iperf_tests
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IperfTest fields.
func (it *IperfTest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case iperftest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			it.ID = int(value.Int64)
		case iperftest.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				it.Timestamp = value.Time
			}
		case iperftest.FieldSentMbps:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field sent_mbps", values[i])
			} else if value.Valid {
				it.SentMbps = value.Float64
			}
		case iperftest.FieldReceivedMbps:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field received_mbps", values[i])
			} else if value.Valid {
				it.ReceivedMbps = value.Float64
			}
		case iperftest.FieldRetransmits:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field retransmits", values[i])
			} else if value.Valid {
				it.Retransmits = value.Float64
			}
		case iperftest.FieldMeanRttMs:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field mean_rtt_ms", values[i])
			} else if value.Valid {
				it.MeanRttMs = value.Float64
			}
		case iperftest.FieldDurationSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_seconds", values[i])
			} else if value.Valid {
				it.DurationSeconds = int(value.Int64)
			}
		case iperftest.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				it.Protocol = value.String
			}
		case iperftest.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				it.Success = value.Bool
			}
		case iperftest.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				it.ErrorMessage = value.String
			}
		case iperftest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_iperf_tests", value)
			} else if value.Valid {
				it.host_iperf_tests = new(int)
				*it.host_iperf_tests = int(value.Int64)
			}
		default:
			it.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IperfTest.
// This includes values selected through modifiers, order, etc.
func (it *IperfTest) Value(name string) (ent.Value, error) {
	return it.selectValues.Get(name)
}

// QueryHost queries the "host" edge of the IperfTest entity.
func (it *IperfTest) QueryHost() *HostQuery {
	return NewIperfTestClient(it.config).QueryHost(it)
}

// Update returns a builder for updating this IperfTest.
// Note that you need to call IperfTest.Unwrap() before calling this method if this IperfTest
// was returned from a transaction, and the transaction was committed or rolled back.
func (it *IperfTest) Update() *IperfTestUpdateOne {
	return NewIperfTestClient(it.config).UpdateOne(it)
}

// Unwrap unwraps the IperfTest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (it *IperfTest) Unwrap() *IperfTest {
	_tx, ok := it.config.driver.(*txDriver)
	if !ok {
		panic("ent: IperfTest is not a transactional entity")
	}
	it.config.driver = _tx.drv
	return it
}

// String implements the fmt.Stringer.
func (it *IperfTest) String() string {
	var builder strings.Builder
	builder.WriteString("IperfTest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", it.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(it.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sent_mbps=")
	builder.WriteString(fmt.Sprintf("%v", it.SentMbps))
	builder.WriteString(", ")
	builder.WriteString("received_mbps=")
	builder.WriteString(fmt.Sprintf("%v", it.ReceivedMbps))
	builder.WriteString(", ")
	builder.WriteString("retransmits=")
	builder.WriteString(fmt.Sprintf("%v", it.Retransmits))
	builder.WriteString(", ")
	builder.WriteString("mean_rtt_ms=")
	builder.WriteString(fmt.Sprintf("%v", it.MeanRttMs))
	builder.WriteString(", ")
	builder.WriteString("duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", it.DurationSeconds))
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(it.Protocol)
	builder.WriteString(", ")
	builder.WriteString("success=")
	builder.WriteString(fmt.Sprintf("%v", it.Success))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(it.ErrorMessage)
	builder.WriteByte(')')
	return builder.String()
}

// IperfTests is a parsable slice of IperfTest.
type IperfTests []*IperfTest
