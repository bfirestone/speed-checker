// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bfirestone/speed-checker/ent/speedtest"
)

// SpeedTest is the model entity for the SpeedTest schema.
type SpeedTest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Download speed in Mbps
	DownloadMbps float64 `json:"download_mbps,omitempty"`
	// Upload speed in Mbps
	UploadMbps float64 `json:"upload_mbps,omitempty"`
	// Ping latency in milliseconds
	PingMs float64 `json:"ping_ms,omitempty"`
	// Jitter in milliseconds
	JitterMs float64 `json:"jitter_ms,omitempty"`
	// Speed test server name
	ServerName string `json:"server_name,omitempty"`
	// Speed test server ID
	ServerID string `json:"server_id,omitempty"`
	// Internet Service Provider
	Isp string `json:"isp,omitempty"`
	// External IP address
	ExternalIP string `json:"external_ip,omitempty"`
	// URL to full test results
	ResultURL string `json:"result_url,omitempty"`
	// Identifier of the daemon that performed the test
	DaemonID     string `json:"daemon_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpeedTest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case speedtest.FieldDownloadMbps, speedtest.FieldUploadMbps, speedtest.FieldPingMs, speedtest.FieldJitterMs:
			values[i] = new(sql.NullFloat64)
		case speedtest.FieldID:
			values[i] = new(sql.NullInt64)
		case speedtest.FieldServerName, speedtest.FieldServerID, speedtest.FieldIsp, speedtest.FieldExternalIP, speedtest.FieldResultURL, speedtest.FieldDaemonID:
			values[i] = new(sql.NullString)
		case speedtest.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpeedTest fields.
func (st *SpeedTest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case speedtest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case speedtest.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				st.Timestamp = value.Time
			}
		case speedtest.FieldDownloadMbps:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field download_mbps", values[i])
			} else if value.Valid {
				st.DownloadMbps = value.Float64
			}
		case speedtest.FieldUploadMbps:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field upload_mbps", values[i])
			} else if value.Valid {
				st.UploadMbps = value.Float64
			}
		case speedtest.FieldPingMs:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ping_ms", values[i])
			} else if value.Valid {
				st.PingMs = value.Float64
			}
		case speedtest.FieldJitterMs:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field jitter_ms", values[i])
			} else if value.Valid {
				st.JitterMs = value.Float64
			}
		case speedtest.FieldServerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_name", values[i])
			} else if value.Valid {
				st.ServerName = value.String
			}
		case speedtest.FieldServerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_id", values[i])
			} else if value.Valid {
				st.ServerID = value.String
			}
		case speedtest.FieldIsp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isp", values[i])
			} else if value.Valid {
				st.Isp = value.String
			}
		case speedtest.FieldExternalIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_ip", values[i])
			} else if value.Valid {
				st.ExternalIP = value.String
			}
		case speedtest.FieldResultURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result_url", values[i])
			} else if value.Valid {
				st.ResultURL = value.String
			}
		case speedtest.FieldDaemonID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field daemon_id", values[i])
			} else if value.Valid {
				st.DaemonID = value.String
			}
		default:
			st.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpeedTest.
// This includes values selected through modifiers, order, etc.
func (st *SpeedTest) Value(name string) (ent.Value, error) {
	return st.selectValues.Get(name)
}

// Update returns a builder for updating this SpeedTest.
// Note that you need to call SpeedTest.Unwrap() before calling this method if this SpeedTest
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SpeedTest) Update() *SpeedTestUpdateOne {
	return NewSpeedTestClient(st.config).UpdateOne(st)
}

// Unwrap unwraps the SpeedTest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SpeedTest) Unwrap() *SpeedTest {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpeedTest is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SpeedTest) String() string {
	var builder strings.Builder
	builder.WriteString("SpeedTest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(st.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("download_mbps=")
	builder.WriteString(fmt.Sprintf("%v", st.DownloadMbps))
	builder.WriteString(", ")
	builder.WriteString("upload_mbps=")
	builder.WriteString(fmt.Sprintf("%v", st.UploadMbps))
	builder.WriteString(", ")
	builder.WriteString("ping_ms=")
	builder.WriteString(fmt.Sprintf("%v", st.PingMs))
	builder.WriteString(", ")
	builder.WriteString("jitter_ms=")
	builder.WriteString(fmt.Sprintf("%v", st.JitterMs))
	builder.WriteString(", ")
	builder.WriteString("server_name=")
	builder.WriteString(st.ServerName)
	builder.WriteString(", ")
	builder.WriteString("server_id=")
	builder.WriteString(st.ServerID)
	builder.WriteString(", ")
	builder.WriteString("isp=")
	builder.WriteString(st.Isp)
	builder.WriteString(", ")
	builder.WriteString("external_ip=")
	builder.WriteString(st.ExternalIP)
	builder.WriteString(", ")
	builder.WriteString("result_url=")
	builder.WriteString(st.ResultURL)
	builder.WriteString(", ")
	builder.WriteString("daemon_id=")
	builder.WriteString(st.DaemonID)
	builder.WriteByte(')')
	return builder.String()
}

// SpeedTests is a parsable slice of SpeedTest.
type SpeedTests []*SpeedTest
