// Code generated by ent, DO NOT EDIT.

package speedtest

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the speedtest type in the database.
	Label = "speed_test"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldDownloadMbps holds the string denoting the download_mbps field in the database.
	FieldDownloadMbps = "download_mbps"
	// FieldUploadMbps holds the string denoting the upload_mbps field in the database.
	FieldUploadMbps = "upload_mbps"
	// FieldPingMs holds the string denoting the ping_ms field in the database.
	FieldPingMs = "ping_ms"
	// FieldJitterMs holds the string denoting the jitter_ms field in the database.
	FieldJitterMs = "jitter_ms"
	// FieldServerName holds the string denoting the server_name field in the database.
	FieldServerName = "server_name"
	// FieldServerID holds the string denoting the server_id field in the database.
	FieldServerID = "server_id"
	// FieldIsp holds the string denoting the isp field in the database.
	FieldIsp = "isp"
	// FieldExternalIP holds the string denoting the external_ip field in the database.
	FieldExternalIP = "external_ip"
	// FieldResultURL holds the string denoting the result_url field in the database.
	FieldResultURL = "result_url"
	// Table holds the table name of the speedtest in the database.
	Table = "speed_tests"
)

// Columns holds all SQL columns for speedtest fields.
var Columns = []string{
	FieldID,
	FieldTimestamp,
	FieldDownloadMbps,
	FieldUploadMbps,
	FieldPingMs,
	FieldJitterMs,
	FieldServerName,
	FieldServerID,
	FieldIsp,
	FieldExternalIP,
	FieldResultURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
)

// OrderOption defines the ordering options for the SpeedTest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByDownloadMbps orders the results by the download_mbps field.
func ByDownloadMbps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadMbps, opts...).ToFunc()
}

// ByUploadMbps orders the results by the upload_mbps field.
func ByUploadMbps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadMbps, opts...).ToFunc()
}

// ByPingMs orders the results by the ping_ms field.
func ByPingMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPingMs, opts...).ToFunc()
}

// ByJitterMs orders the results by the jitter_ms field.
func ByJitterMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJitterMs, opts...).ToFunc()
}

// ByServerName orders the results by the server_name field.
func ByServerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerName, opts...).ToFunc()
}

// ByServerID orders the results by the server_id field.
func ByServerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerID, opts...).ToFunc()
}

// ByIsp orders the results by the isp field.
func ByIsp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsp, opts...).ToFunc()
}

// ByExternalIP orders the results by the external_ip field.
func ByExternalIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalIP, opts...).ToFunc()
}

// ByResultURL orders the results by the result_url field.
func ByResultURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResultURL, opts...).ToFunc()
}
