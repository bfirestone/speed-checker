// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bfirestone/speed-checker/ent/speedtest"
)

// SpeedTestCreate is the builder for creating a SpeedTest entity.
type SpeedTestCreate struct {
	config
	mutation *SpeedTestMutation
	hooks    []Hook
}

// SetTimestamp sets the "timestamp" field.
func (stc *SpeedTestCreate) SetTimestamp(t time.Time) *SpeedTestCreate {
	stc.mutation.SetTimestamp(t)
	return stc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (stc *SpeedTestCreate) SetNillableTimestamp(t *time.Time) *SpeedTestCreate {
	if t != nil {
		stc.SetTimestamp(*t)
	}
	return stc
}

// SetDownloadMbps sets the "download_mbps" field.
func (stc *SpeedTestCreate) SetDownloadMbps(f float64) *SpeedTestCreate {
	stc.mutation.SetDownloadMbps(f)
	return stc
}

// SetUploadMbps sets the "upload_mbps" field.
func (stc *SpeedTestCreate) SetUploadMbps(f float64) *SpeedTestCreate {
	stc.mutation.SetUploadMbps(f)
	return stc
}

// SetPingMs sets the "ping_ms" field.
func (stc *SpeedTestCreate) SetPingMs(f float64) *SpeedTestCreate {
	stc.mutation.SetPingMs(f)
	return stc
}

// SetJitterMs sets the "jitter_ms" field.
func (stc *SpeedTestCreate) SetJitterMs(f float64) *SpeedTestCreate {
	stc.mutation.SetJitterMs(f)
	return stc
}

// SetNillableJitterMs sets the "jitter_ms" field if the given value is not nil.
func (stc *SpeedTestCreate) SetNillableJitterMs(f *float64) *SpeedTestCreate {
	if f != nil {
		stc.SetJitterMs(*f)
	}
	return stc
}

// SetServerName sets the "server_name" field.
func (stc *SpeedTestCreate) SetServerName(s string) *SpeedTestCreate {
	stc.mutation.SetServerName(s)
	return stc
}

// SetNillableServerName sets the "server_name" field if the given value is not nil.
func (stc *SpeedTestCreate) SetNillableServerName(s *string) *SpeedTestCreate {
	if s != nil {
		stc.SetServerName(*s)
	}
	return stc
}

// SetServerID sets the "server_id" field.
func (stc *SpeedTestCreate) SetServerID(s string) *SpeedTestCreate {
	stc.mutation.SetServerID(s)
	return stc
}

// SetNillableServerID sets the "server_id" field if the given value is not nil.
func (stc *SpeedTestCreate) SetNillableServerID(s *string) *SpeedTestCreate {
	if s != nil {
		stc.SetServerID(*s)
	}
	return stc
}

// SetIsp sets the "isp" field.
func (stc *SpeedTestCreate) SetIsp(s string) *SpeedTestCreate {
	stc.mutation.SetIsp(s)
	return stc
}

// SetNillableIsp sets the "isp" field if the given value is not nil.
func (stc *SpeedTestCreate) SetNillableIsp(s *string) *SpeedTestCreate {
	if s != nil {
		stc.SetIsp(*s)
	}
	return stc
}

// SetExternalIP sets the "external_ip" field.
func (stc *SpeedTestCreate) SetExternalIP(s string) *SpeedTestCreate {
	stc.mutation.SetExternalIP(s)
	return stc
}

// SetNillableExternalIP sets the "external_ip" field if the given value is not nil.
func (stc *SpeedTestCreate) SetNillableExternalIP(s *string) *SpeedTestCreate {
	if s != nil {
		stc.SetExternalIP(*s)
	}
	return stc
}

// SetResultURL sets the "result_url" field.
func (stc *SpeedTestCreate) SetResultURL(s string) *SpeedTestCreate {
	stc.mutation.SetResultURL(s)
	return stc
}

// SetNillableResultURL sets the "result_url" field if the given value is not nil.
func (stc *SpeedTestCreate) SetNillableResultURL(s *string) *SpeedTestCreate {
	if s != nil {
		stc.SetResultURL(*s)
	}
	return stc
}

// Mutation returns the SpeedTestMutation object of the builder.
func (stc *SpeedTestCreate) Mutation() *SpeedTestMutation {
	return stc.mutation
}

// Save creates the SpeedTest in the database.
func (stc *SpeedTestCreate) Save(ctx context.Context) (*SpeedTest, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SpeedTestCreate) SaveX(ctx context.Context) *SpeedTest {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SpeedTestCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SpeedTestCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *SpeedTestCreate) defaults() {
	if _, ok := stc.mutation.Timestamp(); !ok {
		v := speedtest.DefaultTimestamp()
		stc.mutation.SetTimestamp(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SpeedTestCreate) check() error {
	if _, ok := stc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "SpeedTest.timestamp"`)}
	}
	if _, ok := stc.mutation.DownloadMbps(); !ok {
		return &ValidationError{Name: "download_mbps", err: errors.New(`ent: missing required field "SpeedTest.download_mbps"`)}
	}
	if _, ok := stc.mutation.UploadMbps(); !ok {
		return &ValidationError{Name: "upload_mbps", err: errors.New(`ent: missing required field "SpeedTest.upload_mbps"`)}
	}
	if _, ok := stc.mutation.PingMs(); !ok {
		return &ValidationError{Name: "ping_ms", err: errors.New(`ent: missing required field "SpeedTest.ping_ms"`)}
	}
	return nil
}

func (stc *SpeedTestCreate) sqlSave(ctx context.Context) (*SpeedTest, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SpeedTestCreate) createSpec() (*SpeedTest, *sqlgraph.CreateSpec) {
	var (
		_node = &SpeedTest{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(speedtest.Table, sqlgraph.NewFieldSpec(speedtest.FieldID, field.TypeInt))
	)
	if value, ok := stc.mutation.Timestamp(); ok {
		_spec.SetField(speedtest.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := stc.mutation.DownloadMbps(); ok {
		_spec.SetField(speedtest.FieldDownloadMbps, field.TypeFloat64, value)
		_node.DownloadMbps = value
	}
	if value, ok := stc.mutation.UploadMbps(); ok {
		_spec.SetField(speedtest.FieldUploadMbps, field.TypeFloat64, value)
		_node.UploadMbps = value
	}
	if value, ok := stc.mutation.PingMs(); ok {
		_spec.SetField(speedtest.FieldPingMs, field.TypeFloat64, value)
		_node.PingMs = value
	}
	if value, ok := stc.mutation.JitterMs(); ok {
		_spec.SetField(speedtest.FieldJitterMs, field.TypeFloat64, value)
		_node.JitterMs = value
	}
	if value, ok := stc.mutation.ServerName(); ok {
		_spec.SetField(speedtest.FieldServerName, field.TypeString, value)
		_node.ServerName = value
	}
	if value, ok := stc.mutation.ServerID(); ok {
		_spec.SetField(speedtest.FieldServerID, field.TypeString, value)
		_node.ServerID = value
	}
	if value, ok := stc.mutation.Isp(); ok {
		_spec.SetField(speedtest.FieldIsp, field.TypeString, value)
		_node.Isp = value
	}
	if value, ok := stc.mutation.ExternalIP(); ok {
		_spec.SetField(speedtest.FieldExternalIP, field.TypeString, value)
		_node.ExternalIP = value
	}
	if value, ok := stc.mutation.ResultURL(); ok {
		_spec.SetField(speedtest.FieldResultURL, field.TypeString, value)
		_node.ResultURL = value
	}
	return _node, _spec
}

// SpeedTestCreateBulk is the builder for creating many SpeedTest entities in bulk.
type SpeedTestCreateBulk struct {
	config
	err      error
	builders []*SpeedTestCreate
}

// Save creates the SpeedTest entities in the database.
func (stcb *SpeedTestCreateBulk) Save(ctx context.Context) ([]*SpeedTest, error) {
	if stcb.err != nil {
		return nil, stcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SpeedTest, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpeedTestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SpeedTestCreateBulk) SaveX(ctx context.Context) []*SpeedTest {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SpeedTestCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SpeedTestCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}
