// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bfirestone/speed-checker/ent/host"
	"github.com/bfirestone/speed-checker/ent/iperftest"
)

// IperfTestCreate is the builder for creating a IperfTest entity.
type IperfTestCreate struct {
	config
	mutation *IperfTestMutation
	hooks    []Hook
}

// SetTimestamp sets the "timestamp" field.
func (itc *IperfTestCreate) SetTimestamp(t time.Time) *IperfTestCreate {
	itc.mutation.SetTimestamp(t)
	return itc
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (itc *IperfTestCreate) SetNillableTimestamp(t *time.Time) *IperfTestCreate {
	if t != nil {
		itc.SetTimestamp(*t)
	}
	return itc
}

// SetSentMbps sets the "sent_mbps" field.
func (itc *IperfTestCreate) SetSentMbps(f float64) *IperfTestCreate {
	itc.mutation.SetSentMbps(f)
	return itc
}

// SetReceivedMbps sets the "received_mbps" field.
func (itc *IperfTestCreate) SetReceivedMbps(f float64) *IperfTestCreate {
	itc.mutation.SetReceivedMbps(f)
	return itc
}

// SetRetransmits sets the "retransmits" field.
func (itc *IperfTestCreate) SetRetransmits(f float64) *IperfTestCreate {
	itc.mutation.SetRetransmits(f)
	return itc
}

// SetNillableRetransmits sets the "retransmits" field if the given value is not nil.
func (itc *IperfTestCreate) SetNillableRetransmits(f *float64) *IperfTestCreate {
	if f != nil {
		itc.SetRetransmits(*f)
	}
	return itc
}

// SetMeanRttMs sets the "mean_rtt_ms" field.
func (itc *IperfTestCreate) SetMeanRttMs(f float64) *IperfTestCreate {
	itc.mutation.SetMeanRttMs(f)
	return itc
}

// SetNillableMeanRttMs sets the "mean_rtt_ms" field if the given value is not nil.
func (itc *IperfTestCreate) SetNillableMeanRttMs(f *float64) *IperfTestCreate {
	if f != nil {
		itc.SetMeanRttMs(*f)
	}
	return itc
}

// SetDurationSeconds sets the "duration_seconds" field.
func (itc *IperfTestCreate) SetDurationSeconds(i int) *IperfTestCreate {
	itc.mutation.SetDurationSeconds(i)
	return itc
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (itc *IperfTestCreate) SetNillableDurationSeconds(i *int) *IperfTestCreate {
	if i != nil {
		itc.SetDurationSeconds(*i)
	}
	return itc
}

// SetProtocol sets the "protocol" field.
func (itc *IperfTestCreate) SetProtocol(s string) *IperfTestCreate {
	itc.mutation.SetProtocol(s)
	return itc
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (itc *IperfTestCreate) SetNillableProtocol(s *string) *IperfTestCreate {
	if s != nil {
		itc.SetProtocol(*s)
	}
	return itc
}

// SetSuccess sets the "success" field.
func (itc *IperfTestCreate) SetSuccess(b bool) *IperfTestCreate {
	itc.mutation.SetSuccess(b)
	return itc
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (itc *IperfTestCreate) SetNillableSuccess(b *bool) *IperfTestCreate {
	if b != nil {
		itc.SetSuccess(*b)
	}
	return itc
}

// SetErrorMessage sets the "error_message" field.
func (itc *IperfTestCreate) SetErrorMessage(s string) *IperfTestCreate {
	itc.mutation.SetErrorMessage(s)
	return itc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (itc *IperfTestCreate) SetNillableErrorMessage(s *string) *IperfTestCreate {
	if s != nil {
		itc.SetErrorMessage(*s)
	}
	return itc
}

// SetHostID sets the "host" edge to the Host entity by ID.
func (itc *IperfTestCreate) SetHostID(id int) *IperfTestCreate {
	itc.mutation.SetHostID(id)
	return itc
}

// SetNillableHostID sets the "host" edge to the Host entity by ID if the given value is not nil.
func (itc *IperfTestCreate) SetNillableHostID(id *int) *IperfTestCreate {
	if id != nil {
		itc = itc.SetHostID(*id)
	}
	return itc
}

// SetHost sets the "host" edge to the Host entity.
func (itc *IperfTestCreate) SetHost(h *Host) *IperfTestCreate {
	return itc.SetHostID(h.ID)
}

// Mutation returns the IperfTestMutation object of the builder.
func (itc *IperfTestCreate) Mutation() *IperfTestMutation {
	return itc.mutation
}

// Save creates the IperfTest in the database.
func (itc *IperfTestCreate) Save(ctx context.Context) (*IperfTest, error) {
	itc.defaults()
	return withHooks(ctx, itc.sqlSave, itc.mutation, itc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (itc *IperfTestCreate) SaveX(ctx context.Context) *IperfTest {
	v, err := itc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itc *IperfTestCreate) Exec(ctx context.Context) error {
	_, err := itc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itc *IperfTestCreate) ExecX(ctx context.Context) {
	if err := itc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itc *IperfTestCreate) defaults() {
	if _, ok := itc.mutation.Timestamp(); !ok {
		v := iperftest.DefaultTimestamp()
		itc.mutation.SetTimestamp(v)
	}
	if _, ok := itc.mutation.DurationSeconds(); !ok {
		v := iperftest.DefaultDurationSeconds
		itc.mutation.SetDurationSeconds(v)
	}
	if _, ok := itc.mutation.Protocol(); !ok {
		v := iperftest.DefaultProtocol
		itc.mutation.SetProtocol(v)
	}
	if _, ok := itc.mutation.Success(); !ok {
		v := iperftest.DefaultSuccess
		itc.mutation.SetSuccess(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itc *IperfTestCreate) check() error {
	if _, ok := itc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "IperfTest.timestamp"`)}
	}
	if _, ok := itc.mutation.SentMbps(); !ok {
		return &ValidationError{Name: "sent_mbps", err: errors.New(`ent: missing required field "IperfTest.sent_mbps"`)}
	}
	if _, ok := itc.mutation.ReceivedMbps(); !ok {
		return &ValidationError{Name: "received_mbps", err: errors.New(`ent: missing required field "IperfTest.received_mbps"`)}
	}
	if _, ok := itc.mutation.DurationSeconds(); !ok {
		return &ValidationError{Name: "duration_seconds", err: errors.New(`ent: missing required field "IperfTest.duration_seconds"`)}
	}
	if _, ok := itc.mutation.Protocol(); !ok {
		return &ValidationError{Name: "protocol", err: errors.New(`ent: missing required field "IperfTest.protocol"`)}
	}
	if _, ok := itc.mutation.Success(); !ok {
		return &ValidationError{Name: "success", err: errors.New(`ent: missing required field "IperfTest.success"`)}
	}
	return nil
}

func (itc *IperfTestCreate) sqlSave(ctx context.Context) (*IperfTest, error) {
	if err := itc.check(); err != nil {
		return nil, err
	}
	_node, _spec := itc.createSpec()
	if err := sqlgraph.CreateNode(ctx, itc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	itc.mutation.id = &_node.ID
	itc.mutation.done = true
	return _node, nil
}

func (itc *IperfTestCreate) createSpec() (*IperfTest, *sqlgraph.CreateSpec) {
	var (
		_node = &IperfTest{config: itc.config}
		_spec = sqlgraph.NewCreateSpec(iperftest.Table, sqlgraph.NewFieldSpec(iperftest.FieldID, field.TypeInt))
	)
	if value, ok := itc.mutation.Timestamp(); ok {
		_spec.SetField(iperftest.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := itc.mutation.SentMbps(); ok {
		_spec.SetField(iperftest.FieldSentMbps, field.TypeFloat64, value)
		_node.SentMbps = value
	}
	if value, ok := itc.mutation.ReceivedMbps(); ok {
		_spec.SetField(iperftest.FieldReceivedMbps, field.TypeFloat64, value)
		_node.ReceivedMbps = value
	}
	if value, ok := itc.mutation.Retransmits(); ok {
		_spec.SetField(iperftest.FieldRetransmits, field.TypeFloat64, value)
		_node.Retransmits = value
	}
	if value, ok := itc.mutation.MeanRttMs(); ok {
		_spec.SetField(iperftest.FieldMeanRttMs, field.TypeFloat64, value)
		_node.MeanRttMs = value
	}
	if value, ok := itc.mutation.DurationSeconds(); ok {
		_spec.SetField(iperftest.FieldDurationSeconds, field.TypeInt, value)
		_node.DurationSeconds = value
	}
	if value, ok := itc.mutation.Protocol(); ok {
		_spec.SetField(iperftest.FieldProtocol, field.TypeString, value)
		_node.Protocol = value
	}
	if value, ok := itc.mutation.Success(); ok {
		_spec.SetField(iperftest.FieldSuccess, field.TypeBool, value)
		_node.Success = value
	}
	if value, ok := itc.mutation.ErrorMessage(); ok {
		_spec.SetField(iperftest.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if nodes := itc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   iperftest.HostTable,
			Columns: []string{iperftest.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.host_iperf_tests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IperfTestCreateBulk is the builder for creating many IperfTest entities in bulk.
type IperfTestCreateBulk struct {
	config
	err      error
	builders []*IperfTestCreate
}

// Save creates the IperfTest entities in the database.
func (itcb *IperfTestCreateBulk) Save(ctx context.Context) ([]*IperfTest, error) {
	if itcb.err != nil {
		return nil, itcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(itcb.builders))
	nodes := make([]*IperfTest, len(itcb.builders))
	mutators := make([]Mutator, len(itcb.builders))
	for i := range itcb.builders {
		func(i int, root context.Context) {
			builder := itcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IperfTestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, itcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, itcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, itcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (itcb *IperfTestCreateBulk) SaveX(ctx context.Context) []*IperfTest {
	v, err := itcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itcb *IperfTestCreateBulk) Exec(ctx context.Context) error {
	_, err := itcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itcb *IperfTestCreateBulk) ExecX(ctx context.Context) {
	if err := itcb.Exec(ctx); err != nil {
		panic(err)
	}
}
