// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for HostType.
const (
	Lan    HostType = "lan"
	Remote HostType = "remote"
	Vpn    HostType = "vpn"
)

// Defines values for IperfTestResultProtocol.
const (
	IperfTestResultProtocolTCP IperfTestResultProtocol = "TCP"
	IperfTestResultProtocolUDP IperfTestResultProtocol = "UDP"
)

// Defines values for IperfTestSubmissionProtocol.
const (
	IperfTestSubmissionProtocolTCP IperfTestSubmissionProtocol = "TCP"
	IperfTestSubmissionProtocolUDP IperfTestSubmissionProtocol = "UDP"
)

// DashboardData defines model for DashboardData.
type DashboardData struct {
	// RecentIperfTests Recent iperf test results
	RecentIperfTests []IperfTestResult `json:"recent_iperf_tests"`

	// RecentSpeedTests Recent speed test results
	RecentSpeedTests []SpeedTestResult `json:"recent_speed_tests"`
	Statistics       struct {
		// ActiveHosts Number of active hosts
		ActiveHosts *int `json:"active_hosts,omitempty"`

		// AvgDownloadMbps Average download speed over last 24h
		AvgDownloadMbps *float64 `json:"avg_download_mbps,omitempty"`

		// AvgUploadMbps Average upload speed over last 24h
		AvgUploadMbps *float64 `json:"avg_upload_mbps,omitempty"`

		// TotalIperfTests Total number of iperf tests
		TotalIperfTests *int `json:"total_iperf_tests,omitempty"`

		// TotalSpeedTests Total number of speed tests
		TotalSpeedTests *int `json:"total_speed_tests,omitempty"`
	} `json:"statistics"`
}

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error code or type
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Host defines model for Host.
type Host struct {
	// Active Whether the host is active for testing
	Active *bool `json:"active,omitempty"`

	// CreatedAt When the host was created
	CreatedAt time.Time `json:"created_at"`

	// Description Optional description of the host
	Description *string `json:"description,omitempty"`

	// Hostname Hostname or IP address
	Hostname string `json:"hostname"`

	// Id Unique identifier for the host
	Id int `json:"id"`

	// Name Human-readable name for the host
	Name string `json:"name"`

	// Port Port number for iperf3 server
	Port int `json:"port"`

	// Type Type of host for categorizing network tests
	Type HostType `json:"type"`

	// UpdatedAt When the host was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// HostCreation defines model for HostCreation.
type HostCreation struct {
	// Active Whether the host is active for testing
	Active *bool `json:"active,omitempty"`

	// Description Optional description of the host
	Description *string `json:"description,omitempty"`

	// Hostname Hostname or IP address
	Hostname string `json:"hostname"`

	// Name Human-readable name for the host
	Name string `json:"name"`

	// Port Port number for iperf3 server
	Port int `json:"port"`

	// Type Type of host for categorizing network tests
	Type HostType `json:"type"`
}

// HostType Type of host for categorizing network tests
type HostType string

// HostUpdate defines model for HostUpdate.
type HostUpdate struct {
	// Active Whether the host is active for testing
	Active *bool `json:"active,omitempty"`

	// Description Optional description of the host
	Description *string `json:"description,omitempty"`

	// Hostname Hostname or IP address
	Hostname string `json:"hostname"`

	// Name Human-readable name for the host
	Name string `json:"name"`

	// Port Port number for iperf3 server
	Port int `json:"port"`

	// Type Type of host for categorizing network tests
	Type HostType `json:"type"`
}

// IperfTestResult defines model for IperfTestResult.
type IperfTestResult struct {
	// CreatedAt When the result was stored in the system
	CreatedAt time.Time `json:"created_at"`

	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DurationSeconds Test duration in seconds
	DurationSeconds int `json:"duration_seconds"`

	// ErrorMessage Error message if test failed
	ErrorMessage *string `json:"error_message,omitempty"`
	Host         Host    `json:"host"`

	// HostId ID of the target host
	HostId int `json:"host_id"`

	// Id Unique identifier for the test result
	Id int `json:"id"`

	// MeanRttMs Mean round-trip time in milliseconds
	MeanRttMs *float64 `json:"mean_rtt_ms,omitempty"`

	// Protocol Protocol used for the test
	Protocol IperfTestResultProtocol `json:"protocol"`

	// ReceivedMbps Received throughput in Mbps
	ReceivedMbps float64 `json:"received_mbps"`

	// Retransmits Number of retransmitted packets
	Retransmits *float64 `json:"retransmits,omitempty"`

	// SentMbps Sent throughput in Mbps
	SentMbps float64 `json:"sent_mbps"`

	// Success Whether the test was successful
	Success *bool `json:"success,omitempty"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`
}

// IperfTestResultProtocol Protocol used for the test
type IperfTestResultProtocol string

// IperfTestSubmission defines model for IperfTestSubmission.
type IperfTestSubmission struct {
	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DurationSeconds Test duration in seconds
	DurationSeconds int `json:"duration_seconds"`

	// HostId ID of the target host
	HostId int `json:"host_id"`

	// MeanRttMs Mean round-trip time in milliseconds
	MeanRttMs *float64 `json:"mean_rtt_ms,omitempty"`

	// Protocol Protocol used for the test
	Protocol IperfTestSubmissionProtocol `json:"protocol"`

	// ReceivedMbps Received throughput in Mbps
	ReceivedMbps float64 `json:"received_mbps"`

	// Retransmits Number of retransmitted packets
	Retransmits *float64 `json:"retransmits,omitempty"`

	// SentMbps Sent throughput in Mbps
	SentMbps float64 `json:"sent_mbps"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`
}

// IperfTestSubmissionProtocol Protocol used for the test
type IperfTestSubmissionProtocol string

// SpeedTestResult defines model for SpeedTestResult.
type SpeedTestResult struct {
	// CreatedAt When the result was stored in the system
	CreatedAt time.Time `json:"created_at"`

	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DownloadMbps Download speed in Mbps
	DownloadMbps float64 `json:"download_mbps"`

	// ExternalIp External IP address used for the test
	ExternalIp *string `json:"external_ip,omitempty"`

	// Id Unique identifier for the test result
	Id int `json:"id"`

	// Isp Internet Service Provider
	Isp *string `json:"isp,omitempty"`

	// JitterMs Jitter in milliseconds
	JitterMs *float64 `json:"jitter_ms,omitempty"`

	// PingMs Ping latency in milliseconds
	PingMs float64 `json:"ping_ms"`

	// ResultUrl URL to full test results
	ResultUrl *string `json:"result_url,omitempty"`

	// ServerId Speed test server ID
	ServerId *string `json:"server_id,omitempty"`

	// ServerName Speed test server name
	ServerName *string `json:"server_name,omitempty"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`

	// UploadMbps Upload speed in Mbps
	UploadMbps float64 `json:"upload_mbps"`
}

// SpeedTestSubmission defines model for SpeedTestSubmission.
type SpeedTestSubmission struct {
	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DownloadMbps Download speed in Mbps
	DownloadMbps float64 `json:"download_mbps"`

	// ExternalIp External IP address used for the test
	ExternalIp *string `json:"external_ip,omitempty"`

	// Isp Internet Service Provider
	Isp *string `json:"isp,omitempty"`

	// JitterMs Jitter in milliseconds
	JitterMs *float64 `json:"jitter_ms,omitempty"`

	// PingMs Ping latency in milliseconds
	PingMs float64 `json:"ping_ms"`

	// ResultUrl URL to full test results
	ResultUrl *string `json:"result_url,omitempty"`

	// ServerId Speed test server ID
	ServerId *string `json:"server_id,omitempty"`

	// ServerName Speed test server name
	ServerName *string `json:"server_name,omitempty"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`

	// UploadMbps Upload speed in Mbps
	UploadMbps float64 `json:"upload_mbps"`
}

// GetHostsParams defines parameters for GetHosts.
type GetHostsParams struct {
	// Type Filter by host type
	Type *HostType `form:"type,omitempty" json:"type,omitempty"`

	// Active Filter by active status
	Active *bool `form:"active,omitempty" json:"active,omitempty"`
}

// GetIperfTestsParams defines parameters for GetIperfTests.
type GetIperfTestsParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// StartTime Filter results after this timestamp (RFC3339)
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Filter results before this timestamp (RFC3339)
	EndTime *time.Time `form:"end_time,omitempty" json:"end_time,omitempty"`

	// HostId Filter by host ID
	HostId *int `form:"host_id,omitempty" json:"host_id,omitempty"`

	// DaemonId Filter by daemon ID
	DaemonId *string `form:"daemon_id,omitempty" json:"daemon_id,omitempty"`
}

// GetSpeedTestsParams defines parameters for GetSpeedTests.
type GetSpeedTestsParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// StartTime Filter results after this timestamp (RFC3339)
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Filter results before this timestamp (RFC3339)
	EndTime *time.Time `form:"end_time,omitempty" json:"end_time,omitempty"`

	// DaemonId Filter by daemon ID
	DaemonId *string `form:"daemon_id,omitempty" json:"daemon_id,omitempty"`
}

// AddHostJSONRequestBody defines body for AddHost for application/json ContentType.
type AddHostJSONRequestBody = HostCreation

// UpdateHostJSONRequestBody defines body for UpdateHost for application/json ContentType.
type UpdateHostJSONRequestBody = HostUpdate

// SubmitIperfTestJSONRequestBody defines body for SubmitIperfTest for application/json ContentType.
type SubmitIperfTestJSONRequestBody = IperfTestSubmission

// SubmitSpeedTestJSONRequestBody defines body for SubmitSpeedTest for application/json ContentType.
type SubmitSpeedTestJSONRequestBody = SpeedTestSubmission

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get dashboard data
	// (GET /dashboard)
	GetDashboard(ctx echo.Context) error
	// Get iperf test hosts
	// (GET /hosts)
	GetHosts(ctx echo.Context, params GetHostsParams) error
	// Add new host
	// (POST /hosts)
	AddHost(ctx echo.Context) error
	// Delete host
	// (DELETE /hosts/{hostId})
	DeleteHost(ctx echo.Context, hostId int) error
	// Get host by ID
	// (GET /hosts/{hostId})
	GetHost(ctx echo.Context, hostId int) error
	// Update host
	// (PUT /hosts/{hostId})
	UpdateHost(ctx echo.Context, hostId int) error
	// Get iperf test results
	// (GET /iperf/results)
	GetIperfTests(ctx echo.Context, params GetIperfTestsParams) error
	// Submit iperf test results
	// (POST /iperf/results)
	SubmitIperfTest(ctx echo.Context) error
	// Delete iperf test result
	// (DELETE /iperf/results/{testId})
	DeleteIperfTest(ctx echo.Context, testId int) error
	// Get speed test results
	// (GET /speedtest/results)
	GetSpeedTests(ctx echo.Context, params GetSpeedTestsParams) error
	// Submit speed test results
	// (POST /speedtest/results)
	SubmitSpeedTest(ctx echo.Context) error
	// Delete speed test result
	// (DELETE /speedtest/results/{testId})
	DeleteSpeedTest(ctx echo.Context, testId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDashboard converts echo context to params.
func (w *ServerInterfaceWrapper) GetDashboard(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDashboard(ctx)
	return err
}

// GetHosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetHosts(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHostsParams
	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHosts(ctx, params)
	return err
}

// AddHost converts echo context to params.
func (w *ServerInterfaceWrapper) AddHost(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddHost(ctx)
	return err
}

// DeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostId" -------------
	var hostId int

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", ctx.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteHost(ctx, hostId)
	return err
}

// GetHost converts echo context to params.
func (w *ServerInterfaceWrapper) GetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostId" -------------
	var hostId int

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", ctx.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHost(ctx, hostId)
	return err
}

// UpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostId" -------------
	var hostId int

	err = runtime.BindStyledParameterWithOptions("simple", "hostId", ctx.Param("hostId"), &hostId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateHost(ctx, hostId)
	return err
}

// GetIperfTests converts echo context to params.
func (w *ServerInterfaceWrapper) GetIperfTests(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIperfTestsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_time: %s", err))
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_time: %s", err))
	}

	// ------------- Optional query parameter "host_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "host_id", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter host_id: %s", err))
	}

	// ------------- Optional query parameter "daemon_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "daemon_id", ctx.QueryParams(), &params.DaemonId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter daemon_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIperfTests(ctx, params)
	return err
}

// SubmitIperfTest converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitIperfTest(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubmitIperfTest(ctx)
	return err
}

// DeleteIperfTest converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIperfTest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "testId" -------------
	var testId int

	err = runtime.BindStyledParameterWithOptions("simple", "testId", ctx.Param("testId"), &testId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter testId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteIperfTest(ctx, testId)
	return err
}

// GetSpeedTests converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpeedTests(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSpeedTestsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_time: %s", err))
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_time: %s", err))
	}

	// ------------- Optional query parameter "daemon_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "daemon_id", ctx.QueryParams(), &params.DaemonId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter daemon_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSpeedTests(ctx, params)
	return err
}

// SubmitSpeedTest converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitSpeedTest(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubmitSpeedTest(ctx)
	return err
}

// DeleteSpeedTest converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSpeedTest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "testId" -------------
	var testId int

	err = runtime.BindStyledParameterWithOptions("simple", "testId", ctx.Param("testId"), &testId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter testId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSpeedTest(ctx, testId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dashboard", wrapper.GetDashboard)
	router.GET(baseURL+"/hosts", wrapper.GetHosts)
	router.POST(baseURL+"/hosts", wrapper.AddHost)
	router.DELETE(baseURL+"/hosts/:hostId", wrapper.DeleteHost)
	router.GET(baseURL+"/hosts/:hostId", wrapper.GetHost)
	router.PUT(baseURL+"/hosts/:hostId", wrapper.UpdateHost)
	router.GET(baseURL+"/iperf/results", wrapper.GetIperfTests)
	router.POST(baseURL+"/iperf/results", wrapper.SubmitIperfTest)
	router.DELETE(baseURL+"/iperf/results/:testId", wrapper.DeleteIperfTest)
	router.GET(baseURL+"/speedtest/results", wrapper.GetSpeedTests)
	router.POST(baseURL+"/speedtest/results", wrapper.SubmitSpeedTest)
	router.DELETE(baseURL+"/speedtest/results/:testId", wrapper.DeleteSpeedTest)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
