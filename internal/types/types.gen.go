// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package types

import (
	"time"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for HostType.
const (
	Lan    HostType = "lan"
	Remote HostType = "remote"
	Vpn    HostType = "vpn"
)

// Defines values for IperfTestResultProtocol.
const (
	IperfTestResultProtocolTCP IperfTestResultProtocol = "TCP"
	IperfTestResultProtocolUDP IperfTestResultProtocol = "UDP"
)

// Defines values for IperfTestSubmissionProtocol.
const (
	IperfTestSubmissionProtocolTCP IperfTestSubmissionProtocol = "TCP"
	IperfTestSubmissionProtocolUDP IperfTestSubmissionProtocol = "UDP"
)

// DashboardData defines model for DashboardData.
type DashboardData struct {
	// RecentIperfTests Recent iperf test results
	RecentIperfTests []IperfTestResult `json:"recent_iperf_tests"`

	// RecentSpeedTests Recent speed test results
	RecentSpeedTests []SpeedTestResult `json:"recent_speed_tests"`
	Statistics       struct {
		// ActiveHosts Number of active hosts
		ActiveHosts *int `json:"active_hosts,omitempty"`

		// AvgDownloadMbps Average download speed over last 24h
		AvgDownloadMbps *float64 `json:"avg_download_mbps,omitempty"`

		// AvgUploadMbps Average upload speed over last 24h
		AvgUploadMbps *float64 `json:"avg_upload_mbps,omitempty"`

		// TotalIperfTests Total number of iperf tests
		TotalIperfTests *int `json:"total_iperf_tests,omitempty"`

		// TotalSpeedTests Total number of speed tests
		TotalSpeedTests *int `json:"total_speed_tests,omitempty"`
	} `json:"statistics"`
}

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error code or type
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Host defines model for Host.
type Host struct {
	// Active Whether the host is active for testing
	Active *bool `json:"active,omitempty"`

	// CreatedAt When the host was created
	CreatedAt time.Time `json:"created_at"`

	// Description Optional description of the host
	Description *string `json:"description,omitempty"`

	// Hostname Hostname or IP address
	Hostname string `json:"hostname"`

	// Id Unique identifier for the host
	Id int `json:"id"`

	// Name Human-readable name for the host
	Name string `json:"name"`

	// Port Port number for iperf3 server
	Port int `json:"port"`

	// Type Type of host for categorizing network tests
	Type HostType `json:"type"`

	// UpdatedAt When the host was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// HostCreation defines model for HostCreation.
type HostCreation struct {
	// Active Whether the host is active for testing
	Active *bool `json:"active,omitempty"`

	// Description Optional description of the host
	Description *string `json:"description,omitempty"`

	// Hostname Hostname or IP address
	Hostname string `json:"hostname"`

	// Name Human-readable name for the host
	Name string `json:"name"`

	// Port Port number for iperf3 server
	Port int `json:"port"`

	// Type Type of host for categorizing network tests
	Type HostType `json:"type"`
}

// HostType Type of host for categorizing network tests
type HostType string

// HostUpdate defines model for HostUpdate.
type HostUpdate struct {
	// Active Whether the host is active for testing
	Active *bool `json:"active,omitempty"`

	// Description Optional description of the host
	Description *string `json:"description,omitempty"`

	// Hostname Hostname or IP address
	Hostname string `json:"hostname"`

	// Name Human-readable name for the host
	Name string `json:"name"`

	// Port Port number for iperf3 server
	Port int `json:"port"`

	// Type Type of host for categorizing network tests
	Type HostType `json:"type"`
}

// IperfTestResult defines model for IperfTestResult.
type IperfTestResult struct {
	// CreatedAt When the result was stored in the system
	CreatedAt time.Time `json:"created_at"`

	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DurationSeconds Test duration in seconds
	DurationSeconds int `json:"duration_seconds"`

	// ErrorMessage Error message if test failed
	ErrorMessage *string `json:"error_message,omitempty"`
	Host         Host    `json:"host"`

	// HostId ID of the target host
	HostId int `json:"host_id"`

	// Id Unique identifier for the test result
	Id int `json:"id"`

	// MeanRttMs Mean round-trip time in milliseconds
	MeanRttMs *float64 `json:"mean_rtt_ms,omitempty"`

	// Protocol Protocol used for the test
	Protocol IperfTestResultProtocol `json:"protocol"`

	// ReceivedMbps Received throughput in Mbps
	ReceivedMbps float64 `json:"received_mbps"`

	// Retransmits Number of retransmitted packets
	Retransmits *float64 `json:"retransmits,omitempty"`

	// SentMbps Sent throughput in Mbps
	SentMbps float64 `json:"sent_mbps"`

	// Success Whether the test was successful
	Success *bool `json:"success,omitempty"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`
}

// IperfTestResultProtocol Protocol used for the test
type IperfTestResultProtocol string

// IperfTestSubmission defines model for IperfTestSubmission.
type IperfTestSubmission struct {
	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DurationSeconds Test duration in seconds
	DurationSeconds int `json:"duration_seconds"`

	// HostId ID of the target host
	HostId int `json:"host_id"`

	// MeanRttMs Mean round-trip time in milliseconds
	MeanRttMs *float64 `json:"mean_rtt_ms,omitempty"`

	// Protocol Protocol used for the test
	Protocol IperfTestSubmissionProtocol `json:"protocol"`

	// ReceivedMbps Received throughput in Mbps
	ReceivedMbps float64 `json:"received_mbps"`

	// Retransmits Number of retransmitted packets
	Retransmits *float64 `json:"retransmits,omitempty"`

	// SentMbps Sent throughput in Mbps
	SentMbps float64 `json:"sent_mbps"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`
}

// IperfTestSubmissionProtocol Protocol used for the test
type IperfTestSubmissionProtocol string

// SpeedTestResult defines model for SpeedTestResult.
type SpeedTestResult struct {
	// CreatedAt When the result was stored in the system
	CreatedAt time.Time `json:"created_at"`

	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DownloadMbps Download speed in Mbps
	DownloadMbps float64 `json:"download_mbps"`

	// ExternalIp External IP address used for the test
	ExternalIp *string `json:"external_ip,omitempty"`

	// Id Unique identifier for the test result
	Id int `json:"id"`

	// Isp Internet Service Provider
	Isp *string `json:"isp,omitempty"`

	// JitterMs Jitter in milliseconds
	JitterMs *float64 `json:"jitter_ms,omitempty"`

	// PingMs Ping latency in milliseconds
	PingMs float64 `json:"ping_ms"`

	// ResultUrl URL to full test results
	ResultUrl *string `json:"result_url,omitempty"`

	// ServerId Speed test server ID
	ServerId *string `json:"server_id,omitempty"`

	// ServerName Speed test server name
	ServerName *string `json:"server_name,omitempty"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`

	// UploadMbps Upload speed in Mbps
	UploadMbps float64 `json:"upload_mbps"`
}

// SpeedTestSubmission defines model for SpeedTestSubmission.
type SpeedTestSubmission struct {
	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DownloadMbps Download speed in Mbps
	DownloadMbps float64 `json:"download_mbps"`

	// ExternalIp External IP address used for the test
	ExternalIp *string `json:"external_ip,omitempty"`

	// Isp Internet Service Provider
	Isp *string `json:"isp,omitempty"`

	// JitterMs Jitter in milliseconds
	JitterMs *float64 `json:"jitter_ms,omitempty"`

	// PingMs Ping latency in milliseconds
	PingMs float64 `json:"ping_ms"`

	// ResultUrl URL to full test results
	ResultUrl *string `json:"result_url,omitempty"`

	// ServerId Speed test server ID
	ServerId *string `json:"server_id,omitempty"`

	// ServerName Speed test server name
	ServerName *string `json:"server_name,omitempty"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`

	// UploadMbps Upload speed in Mbps
	UploadMbps float64 `json:"upload_mbps"`
}

// GetHostsParams defines parameters for GetHosts.
type GetHostsParams struct {
	// Type Filter by host type
	Type *HostType `form:"type,omitempty" json:"type,omitempty"`

	// Active Filter by active status
	Active *bool `form:"active,omitempty" json:"active,omitempty"`
}

// GetIperfTestsParams defines parameters for GetIperfTests.
type GetIperfTestsParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// StartTime Filter results after this timestamp (RFC3339)
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Filter results before this timestamp (RFC3339)
	EndTime *time.Time `form:"end_time,omitempty" json:"end_time,omitempty"`

	// HostId Filter by host ID
	HostId *int `form:"host_id,omitempty" json:"host_id,omitempty"`

	// DaemonId Filter by daemon ID
	DaemonId *string `form:"daemon_id,omitempty" json:"daemon_id,omitempty"`
}

// GetSpeedTestsParams defines parameters for GetSpeedTests.
type GetSpeedTestsParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// StartTime Filter results after this timestamp (RFC3339)
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Filter results before this timestamp (RFC3339)
	EndTime *time.Time `form:"end_time,omitempty" json:"end_time,omitempty"`

	// DaemonId Filter by daemon ID
	DaemonId *string `form:"daemon_id,omitempty" json:"daemon_id,omitempty"`
}

// AddHostJSONRequestBody defines body for AddHost for application/json ContentType.
type AddHostJSONRequestBody = HostCreation

// UpdateHostJSONRequestBody defines body for UpdateHost for application/json ContentType.
type UpdateHostJSONRequestBody = HostUpdate

// SubmitIperfTestJSONRequestBody defines body for SubmitIperfTest for application/json ContentType.
type SubmitIperfTestJSONRequestBody = IperfTestSubmission

// SubmitSpeedTestJSONRequestBody defines body for SubmitSpeedTest for application/json ContentType.
type SubmitSpeedTestJSONRequestBody = SpeedTestSubmission
