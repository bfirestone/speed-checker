// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for HostType.
const (
	Lan    HostType = "lan"
	Remote HostType = "remote"
	Vpn    HostType = "vpn"
)

// Defines values for IperfTestResultProtocol.
const (
	IperfTestResultProtocolTCP IperfTestResultProtocol = "TCP"
	IperfTestResultProtocolUDP IperfTestResultProtocol = "UDP"
)

// Defines values for IperfTestSubmissionProtocol.
const (
	IperfTestSubmissionProtocolTCP IperfTestSubmissionProtocol = "TCP"
	IperfTestSubmissionProtocolUDP IperfTestSubmissionProtocol = "UDP"
)

// DashboardData defines model for DashboardData.
type DashboardData struct {
	// ActiveHosts List of active hosts available for testing
	ActiveHosts []Host `json:"active_hosts"`

	// RecentIperfTests Recent iperf test results
	RecentIperfTests []IperfTestResult `json:"recent_iperf_tests"`

	// RecentSpeedTests Recent speed test results
	RecentSpeedTests []SpeedTestResult `json:"recent_speed_tests"`
	Statistics       struct {
		// ActiveHosts Number of active hosts
		ActiveHosts *int `json:"active_hosts,omitempty"`

		// AvgDownloadMbps Average download speed over last 24h
		AvgDownloadMbps *float64 `json:"avg_download_mbps,omitempty"`

		// AvgUploadMbps Average upload speed over last 24h
		AvgUploadMbps *float64 `json:"avg_upload_mbps,omitempty"`

		// TotalIperfTests Total number of iperf tests
		TotalIperfTests *int `json:"total_iperf_tests,omitempty"`

		// TotalSpeedTests Total number of speed tests
		TotalSpeedTests *int `json:"total_speed_tests,omitempty"`
	} `json:"statistics"`
}

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error code or type
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Host defines model for Host.
type Host struct {
	// Active Whether the host is active for testing
	Active *bool `json:"active,omitempty"`

	// CreatedAt When the host was created
	CreatedAt time.Time `json:"created_at"`

	// Description Optional description of the host
	Description *string `json:"description,omitempty"`

	// Hostname Hostname or IP address
	Hostname string `json:"hostname"`

	// Id Unique identifier for the host
	Id int `json:"id"`

	// Name Human-readable name for the host
	Name string `json:"name"`

	// Port Port number for iperf3 server
	Port int `json:"port"`

	// Type Type of host for categorizing network tests
	Type HostType `json:"type"`

	// UpdatedAt When the host was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// HostCreation defines model for HostCreation.
type HostCreation struct {
	// Active Whether the host is active for testing
	Active *bool `json:"active,omitempty"`

	// Description Optional description of the host
	Description *string `json:"description,omitempty"`

	// Hostname Hostname or IP address
	Hostname string `json:"hostname"`

	// Name Human-readable name for the host
	Name string `json:"name"`

	// Port Port number for iperf3 server
	Port int `json:"port"`

	// Type Type of host for categorizing network tests
	Type HostType `json:"type"`
}

// HostType Type of host for categorizing network tests
type HostType string

// HostUpdate defines model for HostUpdate.
type HostUpdate struct {
	// Active Whether the host is active for testing
	Active *bool `json:"active,omitempty"`

	// Description Optional description of the host
	Description *string `json:"description,omitempty"`

	// Hostname Hostname or IP address
	Hostname string `json:"hostname"`

	// Name Human-readable name for the host
	Name string `json:"name"`

	// Port Port number for iperf3 server
	Port int `json:"port"`

	// Type Type of host for categorizing network tests
	Type HostType `json:"type"`
}

// IperfTestResult defines model for IperfTestResult.
type IperfTestResult struct {
	// CreatedAt When the result was stored in the system
	CreatedAt time.Time `json:"created_at"`

	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DurationSeconds Test duration in seconds
	DurationSeconds int `json:"duration_seconds"`

	// ErrorMessage Error message if test failed
	ErrorMessage *string `json:"error_message,omitempty"`
	Host         Host    `json:"host"`

	// HostId ID of the target host
	HostId int `json:"host_id"`

	// Id Unique identifier for the test result
	Id int `json:"id"`

	// MeanRttMs Mean round-trip time in milliseconds
	MeanRttMs *float64 `json:"mean_rtt_ms,omitempty"`

	// Protocol Protocol used for the test
	Protocol IperfTestResultProtocol `json:"protocol"`

	// ReceivedMbps Received throughput in Mbps
	ReceivedMbps float64 `json:"received_mbps"`

	// Retransmits Number of retransmitted packets
	Retransmits *float64 `json:"retransmits,omitempty"`

	// SentMbps Sent throughput in Mbps
	SentMbps float64 `json:"sent_mbps"`

	// Success Whether the test was successful
	Success *bool `json:"success,omitempty"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`
}

// IperfTestResultProtocol Protocol used for the test
type IperfTestResultProtocol string

// IperfTestSubmission defines model for IperfTestSubmission.
type IperfTestSubmission struct {
	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DurationSeconds Test duration in seconds
	DurationSeconds int `json:"duration_seconds"`

	// HostId ID of the target host
	HostId int `json:"host_id"`

	// MeanRttMs Mean round-trip time in milliseconds
	MeanRttMs *float64 `json:"mean_rtt_ms,omitempty"`

	// Protocol Protocol used for the test
	Protocol IperfTestSubmissionProtocol `json:"protocol"`

	// ReceivedMbps Received throughput in Mbps
	ReceivedMbps float64 `json:"received_mbps"`

	// Retransmits Number of retransmitted packets
	Retransmits *float64 `json:"retransmits,omitempty"`

	// SentMbps Sent throughput in Mbps
	SentMbps float64 `json:"sent_mbps"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`
}

// IperfTestSubmissionProtocol Protocol used for the test
type IperfTestSubmissionProtocol string

// SpeedTestResult defines model for SpeedTestResult.
type SpeedTestResult struct {
	// CreatedAt When the result was stored in the system
	CreatedAt time.Time `json:"created_at"`

	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DownloadMbps Download speed in Mbps
	DownloadMbps float64 `json:"download_mbps"`

	// ExternalIp External IP address used for the test
	ExternalIp *string `json:"external_ip,omitempty"`

	// Id Unique identifier for the test result
	Id int `json:"id"`

	// Isp Internet Service Provider
	Isp *string `json:"isp,omitempty"`

	// JitterMs Jitter in milliseconds
	JitterMs *float64 `json:"jitter_ms,omitempty"`

	// PingMs Ping latency in milliseconds
	PingMs float64 `json:"ping_ms"`

	// ResultUrl URL to full test results
	ResultUrl *string `json:"result_url,omitempty"`

	// ServerId Speed test server ID
	ServerId *string `json:"server_id,omitempty"`

	// ServerName Speed test server name
	ServerName *string `json:"server_name,omitempty"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`

	// UploadMbps Upload speed in Mbps
	UploadMbps float64 `json:"upload_mbps"`
}

// SpeedTestSubmission defines model for SpeedTestSubmission.
type SpeedTestSubmission struct {
	// DaemonId Identifier of the daemon that performed the test
	DaemonId string `json:"daemon_id"`

	// DownloadMbps Download speed in Mbps
	DownloadMbps float64 `json:"download_mbps"`

	// ExternalIp External IP address used for the test
	ExternalIp *string `json:"external_ip,omitempty"`

	// Isp Internet Service Provider
	Isp *string `json:"isp,omitempty"`

	// JitterMs Jitter in milliseconds
	JitterMs *float64 `json:"jitter_ms,omitempty"`

	// PingMs Ping latency in milliseconds
	PingMs float64 `json:"ping_ms"`

	// ResultUrl URL to full test results
	ResultUrl *string `json:"result_url,omitempty"`

	// ServerId Speed test server ID
	ServerId *string `json:"server_id,omitempty"`

	// ServerName Speed test server name
	ServerName *string `json:"server_name,omitempty"`

	// Timestamp When the test was performed (RFC3339)
	Timestamp time.Time `json:"timestamp"`

	// UploadMbps Upload speed in Mbps
	UploadMbps float64 `json:"upload_mbps"`
}

// GetHostsParams defines parameters for GetHosts.
type GetHostsParams struct {
	// Type Filter by host type
	Type *HostType `form:"type,omitempty" json:"type,omitempty"`

	// Active Filter by active status
	Active *bool `form:"active,omitempty" json:"active,omitempty"`
}

// GetIperfTestsParams defines parameters for GetIperfTests.
type GetIperfTestsParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// StartTime Filter results after this timestamp (RFC3339)
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Filter results before this timestamp (RFC3339)
	EndTime *time.Time `form:"end_time,omitempty" json:"end_time,omitempty"`

	// HostId Filter by host ID
	HostId *int `form:"host_id,omitempty" json:"host_id,omitempty"`

	// DaemonId Filter by daemon ID
	DaemonId *string `form:"daemon_id,omitempty" json:"daemon_id,omitempty"`
}

// GetSpeedTestsParams defines parameters for GetSpeedTests.
type GetSpeedTestsParams struct {
	// Limit Maximum number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of results to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// StartTime Filter results after this timestamp (RFC3339)
	StartTime *time.Time `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Filter results before this timestamp (RFC3339)
	EndTime *time.Time `form:"end_time,omitempty" json:"end_time,omitempty"`

	// DaemonId Filter by daemon ID
	DaemonId *string `form:"daemon_id,omitempty" json:"daemon_id,omitempty"`
}

// AddHostJSONRequestBody defines body for AddHost for application/json ContentType.
type AddHostJSONRequestBody = HostCreation

// UpdateHostJSONRequestBody defines body for UpdateHost for application/json ContentType.
type UpdateHostJSONRequestBody = HostUpdate

// SubmitIperfTestJSONRequestBody defines body for SubmitIperfTest for application/json ContentType.
type SubmitIperfTestJSONRequestBody = IperfTestSubmission

// SubmitSpeedTestJSONRequestBody defines body for SubmitSpeedTest for application/json ContentType.
type SubmitSpeedTestJSONRequestBody = SpeedTestSubmission

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDashboard request
	GetDashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHosts request
	GetHosts(ctx context.Context, params *GetHostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddHostWithBody request with any body
	AddHostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddHost(ctx context.Context, body AddHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHost request
	DeleteHost(ctx context.Context, hostId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHost request
	GetHost(ctx context.Context, hostId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateHostWithBody request with any body
	UpdateHostWithBody(ctx context.Context, hostId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateHost(ctx context.Context, hostId int, body UpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIperfTests request
	GetIperfTests(ctx context.Context, params *GetIperfTestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitIperfTestWithBody request with any body
	SubmitIperfTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitIperfTest(ctx context.Context, body SubmitIperfTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIperfTest request
	DeleteIperfTest(ctx context.Context, testId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpeedTests request
	GetSpeedTests(ctx context.Context, params *GetSpeedTestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitSpeedTestWithBody request with any body
	SubmitSpeedTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitSpeedTest(ctx context.Context, body SubmitSpeedTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSpeedTest request
	DeleteSpeedTest(ctx context.Context, testId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHosts(ctx context.Context, params *GetHostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddHostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddHostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddHost(ctx context.Context, body AddHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddHostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHost(ctx context.Context, hostId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHostRequest(c.Server, hostId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHost(ctx context.Context, hostId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostRequest(c.Server, hostId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHostWithBody(ctx context.Context, hostId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHostRequestWithBody(c.Server, hostId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHost(ctx context.Context, hostId int, body UpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHostRequest(c.Server, hostId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIperfTests(ctx context.Context, params *GetIperfTestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIperfTestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitIperfTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitIperfTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitIperfTest(ctx context.Context, body SubmitIperfTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitIperfTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIperfTest(ctx context.Context, testId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIperfTestRequest(c.Server, testId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpeedTests(ctx context.Context, params *GetSpeedTestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpeedTestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitSpeedTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitSpeedTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitSpeedTest(ctx context.Context, body SubmitSpeedTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitSpeedTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSpeedTest(ctx context.Context, testId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSpeedTestRequest(c.Server, testId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDashboardRequest generates requests for GetDashboard
func NewGetDashboardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHostsRequest generates requests for GetHosts
func NewGetHostsRequest(server string, params *GetHostsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddHostRequest calls the generic AddHost builder with application/json body
func NewAddHostRequest(server string, body AddHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddHostRequestWithBody(server, "application/json", bodyReader)
}

// NewAddHostRequestWithBody generates requests for AddHost with any type of body
func NewAddHostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHostRequest generates requests for DeleteHost
func NewDeleteHostRequest(server string, hostId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostId", runtime.ParamLocationPath, hostId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHostRequest generates requests for GetHost
func NewGetHostRequest(server string, hostId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostId", runtime.ParamLocationPath, hostId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateHostRequest calls the generic UpdateHost builder with application/json body
func NewUpdateHostRequest(server string, hostId int, body UpdateHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateHostRequestWithBody(server, hostId, "application/json", bodyReader)
}

// NewUpdateHostRequestWithBody generates requests for UpdateHost with any type of body
func NewUpdateHostRequestWithBody(server string, hostId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostId", runtime.ParamLocationPath, hostId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIperfTestsRequest generates requests for GetIperfTests
func NewGetIperfTestsRequest(server string, params *GetIperfTestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iperf/results")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "host_id", runtime.ParamLocationQuery, *params.HostId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DaemonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_id", runtime.ParamLocationQuery, *params.DaemonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitIperfTestRequest calls the generic SubmitIperfTest builder with application/json body
func NewSubmitIperfTestRequest(server string, body SubmitIperfTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitIperfTestRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitIperfTestRequestWithBody generates requests for SubmitIperfTest with any type of body
func NewSubmitIperfTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iperf/results")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIperfTestRequest generates requests for DeleteIperfTest
func NewDeleteIperfTestRequest(server string, testId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "testId", runtime.ParamLocationPath, testId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iperf/results/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpeedTestsRequest generates requests for GetSpeedTests
func NewGetSpeedTestsRequest(server string, params *GetSpeedTestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/speedtest/results")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DaemonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daemon_id", runtime.ParamLocationQuery, *params.DaemonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitSpeedTestRequest calls the generic SubmitSpeedTest builder with application/json body
func NewSubmitSpeedTestRequest(server string, body SubmitSpeedTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitSpeedTestRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitSpeedTestRequestWithBody generates requests for SubmitSpeedTest with any type of body
func NewSubmitSpeedTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/speedtest/results")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSpeedTestRequest generates requests for DeleteSpeedTest
func NewDeleteSpeedTestRequest(server string, testId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "testId", runtime.ParamLocationPath, testId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/speedtest/results/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDashboardWithResponse request
	GetDashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error)

	// GetHostsWithResponse request
	GetHostsWithResponse(ctx context.Context, params *GetHostsParams, reqEditors ...RequestEditorFn) (*GetHostsResponse, error)

	// AddHostWithBodyWithResponse request with any body
	AddHostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddHostResponse, error)

	AddHostWithResponse(ctx context.Context, body AddHostJSONRequestBody, reqEditors ...RequestEditorFn) (*AddHostResponse, error)

	// DeleteHostWithResponse request
	DeleteHostWithResponse(ctx context.Context, hostId int, reqEditors ...RequestEditorFn) (*DeleteHostResponse, error)

	// GetHostWithResponse request
	GetHostWithResponse(ctx context.Context, hostId int, reqEditors ...RequestEditorFn) (*GetHostResponse, error)

	// UpdateHostWithBodyWithResponse request with any body
	UpdateHostWithBodyWithResponse(ctx context.Context, hostId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHostResponse, error)

	UpdateHostWithResponse(ctx context.Context, hostId int, body UpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHostResponse, error)

	// GetIperfTestsWithResponse request
	GetIperfTestsWithResponse(ctx context.Context, params *GetIperfTestsParams, reqEditors ...RequestEditorFn) (*GetIperfTestsResponse, error)

	// SubmitIperfTestWithBodyWithResponse request with any body
	SubmitIperfTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitIperfTestResponse, error)

	SubmitIperfTestWithResponse(ctx context.Context, body SubmitIperfTestJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitIperfTestResponse, error)

	// DeleteIperfTestWithResponse request
	DeleteIperfTestWithResponse(ctx context.Context, testId int, reqEditors ...RequestEditorFn) (*DeleteIperfTestResponse, error)

	// GetSpeedTestsWithResponse request
	GetSpeedTestsWithResponse(ctx context.Context, params *GetSpeedTestsParams, reqEditors ...RequestEditorFn) (*GetSpeedTestsResponse, error)

	// SubmitSpeedTestWithBodyWithResponse request with any body
	SubmitSpeedTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitSpeedTestResponse, error)

	SubmitSpeedTestWithResponse(ctx context.Context, body SubmitSpeedTestJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitSpeedTestResponse, error)

	// DeleteSpeedTestWithResponse request
	DeleteSpeedTestWithResponse(ctx context.Context, testId int, reqEditors ...RequestEditorFn) (*DeleteSpeedTestResponse, error)
}

type GetDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DashboardData
}

// Status returns HTTPResponse.Status
func (r GetDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Host
}

// Status returns HTTPResponse.Status
func (r GetHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Host
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r AddHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIperfTestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Limit   *int               `json:"limit,omitempty"`
		Offset  *int               `json:"offset,omitempty"`
		Results *[]IperfTestResult `json:"results,omitempty"`

		// Total Total number of matching results
		Total *int `json:"total,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetIperfTestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIperfTestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitIperfTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IperfTestResult
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SubmitIperfTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitIperfTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIperfTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteIperfTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIperfTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpeedTestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Limit   *int               `json:"limit,omitempty"`
		Offset  *int               `json:"offset,omitempty"`
		Results *[]SpeedTestResult `json:"results,omitempty"`

		// Total Total number of matching results
		Total *int `json:"total,omitempty"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r GetSpeedTestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpeedTestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitSpeedTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SpeedTestResult
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SubmitSpeedTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitSpeedTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSpeedTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSpeedTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSpeedTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDashboardWithResponse request returning *GetDashboardResponse
func (c *ClientWithResponses) GetDashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardResponse, error) {
	rsp, err := c.GetDashboard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardResponse(rsp)
}

// GetHostsWithResponse request returning *GetHostsResponse
func (c *ClientWithResponses) GetHostsWithResponse(ctx context.Context, params *GetHostsParams, reqEditors ...RequestEditorFn) (*GetHostsResponse, error) {
	rsp, err := c.GetHosts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostsResponse(rsp)
}

// AddHostWithBodyWithResponse request with arbitrary body returning *AddHostResponse
func (c *ClientWithResponses) AddHostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddHostResponse, error) {
	rsp, err := c.AddHostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddHostResponse(rsp)
}

func (c *ClientWithResponses) AddHostWithResponse(ctx context.Context, body AddHostJSONRequestBody, reqEditors ...RequestEditorFn) (*AddHostResponse, error) {
	rsp, err := c.AddHost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddHostResponse(rsp)
}

// DeleteHostWithResponse request returning *DeleteHostResponse
func (c *ClientWithResponses) DeleteHostWithResponse(ctx context.Context, hostId int, reqEditors ...RequestEditorFn) (*DeleteHostResponse, error) {
	rsp, err := c.DeleteHost(ctx, hostId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHostResponse(rsp)
}

// GetHostWithResponse request returning *GetHostResponse
func (c *ClientWithResponses) GetHostWithResponse(ctx context.Context, hostId int, reqEditors ...RequestEditorFn) (*GetHostResponse, error) {
	rsp, err := c.GetHost(ctx, hostId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostResponse(rsp)
}

// UpdateHostWithBodyWithResponse request with arbitrary body returning *UpdateHostResponse
func (c *ClientWithResponses) UpdateHostWithBodyWithResponse(ctx context.Context, hostId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHostResponse, error) {
	rsp, err := c.UpdateHostWithBody(ctx, hostId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHostResponse(rsp)
}

func (c *ClientWithResponses) UpdateHostWithResponse(ctx context.Context, hostId int, body UpdateHostJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHostResponse, error) {
	rsp, err := c.UpdateHost(ctx, hostId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHostResponse(rsp)
}

// GetIperfTestsWithResponse request returning *GetIperfTestsResponse
func (c *ClientWithResponses) GetIperfTestsWithResponse(ctx context.Context, params *GetIperfTestsParams, reqEditors ...RequestEditorFn) (*GetIperfTestsResponse, error) {
	rsp, err := c.GetIperfTests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIperfTestsResponse(rsp)
}

// SubmitIperfTestWithBodyWithResponse request with arbitrary body returning *SubmitIperfTestResponse
func (c *ClientWithResponses) SubmitIperfTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitIperfTestResponse, error) {
	rsp, err := c.SubmitIperfTestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitIperfTestResponse(rsp)
}

func (c *ClientWithResponses) SubmitIperfTestWithResponse(ctx context.Context, body SubmitIperfTestJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitIperfTestResponse, error) {
	rsp, err := c.SubmitIperfTest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitIperfTestResponse(rsp)
}

// DeleteIperfTestWithResponse request returning *DeleteIperfTestResponse
func (c *ClientWithResponses) DeleteIperfTestWithResponse(ctx context.Context, testId int, reqEditors ...RequestEditorFn) (*DeleteIperfTestResponse, error) {
	rsp, err := c.DeleteIperfTest(ctx, testId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIperfTestResponse(rsp)
}

// GetSpeedTestsWithResponse request returning *GetSpeedTestsResponse
func (c *ClientWithResponses) GetSpeedTestsWithResponse(ctx context.Context, params *GetSpeedTestsParams, reqEditors ...RequestEditorFn) (*GetSpeedTestsResponse, error) {
	rsp, err := c.GetSpeedTests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpeedTestsResponse(rsp)
}

// SubmitSpeedTestWithBodyWithResponse request with arbitrary body returning *SubmitSpeedTestResponse
func (c *ClientWithResponses) SubmitSpeedTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitSpeedTestResponse, error) {
	rsp, err := c.SubmitSpeedTestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitSpeedTestResponse(rsp)
}

func (c *ClientWithResponses) SubmitSpeedTestWithResponse(ctx context.Context, body SubmitSpeedTestJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitSpeedTestResponse, error) {
	rsp, err := c.SubmitSpeedTest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitSpeedTestResponse(rsp)
}

// DeleteSpeedTestWithResponse request returning *DeleteSpeedTestResponse
func (c *ClientWithResponses) DeleteSpeedTestWithResponse(ctx context.Context, testId int, reqEditors ...RequestEditorFn) (*DeleteSpeedTestResponse, error) {
	rsp, err := c.DeleteSpeedTest(ctx, testId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSpeedTestResponse(rsp)
}

// ParseGetDashboardResponse parses an HTTP response from a GetDashboardWithResponse call
func ParseGetDashboardResponse(rsp *http.Response) (*GetDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHostsResponse parses an HTTP response from a GetHostsWithResponse call
func ParseGetHostsResponse(rsp *http.Response) (*GetHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddHostResponse parses an HTTP response from a AddHostWithResponse call
func ParseAddHostResponse(rsp *http.Response) (*AddHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteHostResponse parses an HTTP response from a DeleteHostWithResponse call
func ParseDeleteHostResponse(rsp *http.Response) (*DeleteHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetHostResponse parses an HTTP response from a GetHostWithResponse call
func ParseGetHostResponse(rsp *http.Response) (*GetHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateHostResponse parses an HTTP response from a UpdateHostWithResponse call
func ParseUpdateHostResponse(rsp *http.Response) (*UpdateHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetIperfTestsResponse parses an HTTP response from a GetIperfTestsWithResponse call
func ParseGetIperfTestsResponse(rsp *http.Response) (*GetIperfTestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIperfTestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Limit   *int               `json:"limit,omitempty"`
			Offset  *int               `json:"offset,omitempty"`
			Results *[]IperfTestResult `json:"results,omitempty"`

			// Total Total number of matching results
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubmitIperfTestResponse parses an HTTP response from a SubmitIperfTestWithResponse call
func ParseSubmitIperfTestResponse(rsp *http.Response) (*SubmitIperfTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitIperfTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IperfTestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteIperfTestResponse parses an HTTP response from a DeleteIperfTestWithResponse call
func ParseDeleteIperfTestResponse(rsp *http.Response) (*DeleteIperfTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIperfTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSpeedTestsResponse parses an HTTP response from a GetSpeedTestsWithResponse call
func ParseGetSpeedTestsResponse(rsp *http.Response) (*GetSpeedTestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpeedTestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Limit   *int               `json:"limit,omitempty"`
			Offset  *int               `json:"offset,omitempty"`
			Results *[]SpeedTestResult `json:"results,omitempty"`

			// Total Total number of matching results
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSubmitSpeedTestResponse parses an HTTP response from a SubmitSpeedTestWithResponse call
func ParseSubmitSpeedTestResponse(rsp *http.Response) (*SubmitSpeedTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitSpeedTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SpeedTestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteSpeedTestResponse parses an HTTP response from a DeleteSpeedTestWithResponse call
func ParseDeleteSpeedTestResponse(rsp *http.Response) (*DeleteSpeedTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSpeedTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
